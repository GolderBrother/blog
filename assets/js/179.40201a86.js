(window.webpackJsonp=window.webpackJsonp||[]).push([[179],{629:function(e,t,n){"use strict";n.r(t);var a=n(1),s=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"vue-ts-el-搭建博客及踩坑记"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vue-ts-el-搭建博客及踩坑记"}},[e._v("#")]),e._v(" Vue + TS + El 搭建博客及踩坑记")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/12890819-b96702b6b7cd5c11.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:""}})]),e._v(" "),n("h2",{attrs:{id:"前言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),n("p",[e._v("本文讲解如何在 Vue 项目中使用 TypeScript 来搭建并开发项目，并在此过程中踩过的坑 。")]),e._v(" "),n("p",[e._v("TypeScript 具有类型系统，且是 JavaScript 的超集，TypeScript 在 2018 年 势头迅猛，可谓遍地开花。")]),e._v(" "),n("p",[e._v("Vue3.0 将使用 TS 重写，重写后的 Vue3.0 将更好的支持 TS。2019 年 TypeScript 将会更加普及，能够熟练掌握 TS，并使用 TS 开发过项目，将更加成为前端开发者的优势。")]),e._v(" "),n("p",[e._v("所以笔者就当然也要学这个必备技能，就以 "),n("strong",[e._v("边学边实践")]),e._v(" 的方式，做个博客项目来玩玩。")]),e._v(" "),n("p",[e._v("此项目是基于 Vue 全家桶 + TypeScript + Element-UI 的技术栈，且已经开源，github 地址 "),n("a",{attrs:{href:"https://github.com/biaochenxuying/blog-vue-typescript",target:"_blank",rel:"noopener noreferrer"}},[e._v("blog-vue-typescript"),n("OutboundLink")],1),e._v(" 。")]),e._v(" "),n("p",[e._v("做一个不是我司的项目，且又是 vue 相关的项目来练手并开源吧。")]),e._v(" "),n("h2",{attrs:{id:"_1-效果"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-效果"}},[e._v("#")]),e._v(" 1. 效果")]),e._v(" "),n("p",[e._v("效果图：")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("pc 端")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("主页\n"),n("img",{attrs:{src:"http://img.golderbrother.cn/blog-home.png",alt:"主页"}})])]),e._v(" "),n("li",[n("p",[e._v("首页\n"),n("img",{attrs:{src:"http://img.golderbrother.cn/blog-articles.png",alt:"首页"}})])])])]),e._v(" "),n("li",[n("p",[e._v("移动端")])])]),e._v(" "),n("p",[n("img",{attrs:{src:"http://img.golderbrother.cn/blog-mobile.png",alt:"mobile"}})]),e._v(" "),n("p",[e._v("完整效果请看："),n("a",{attrs:{href:"https://biaochenxuying.cn",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://biaochenxuying.cn"),n("OutboundLink")],1)]),e._v(" "),n("h2",{attrs:{id:"_2-功能"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-功能"}},[e._v("#")]),e._v(" 2. 功能")]),e._v(" "),n("h3",{attrs:{id:"已经完成功能"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#已经完成功能"}},[e._v("#")]),e._v(" 已经完成功能")]),e._v(" "),n("ul",[n("li",[e._v("[x] 登录")]),e._v(" "),n("li",[e._v("[x] 注册")]),e._v(" "),n("li",[e._v("[x] 文章列表")]),e._v(" "),n("li",[e._v("[x] 文章归档")]),e._v(" "),n("li",[e._v("[x] 标签")]),e._v(" "),n("li",[e._v("[x] 关于")]),e._v(" "),n("li",[e._v("[x] 点赞与评论")]),e._v(" "),n("li",[e._v("[x] 留言")]),e._v(" "),n("li",[e._v("[x] 历程")]),e._v(" "),n("li",[e._v("[x] 文章详情（支持代码语法高亮）")]),e._v(" "),n("li",[e._v("[x] 文章详情目录")]),e._v(" "),n("li",[e._v("[x] 移动端适配")]),e._v(" "),n("li",[e._v("[x] github 授权登录")])]),e._v(" "),n("h3",{attrs:{id:"待优化或者实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#待优化或者实现"}},[e._v("#")]),e._v(" 待优化或者实现")]),e._v(" "),n("ul",[n("li",[e._v("[ ] 使用 vuex-class")]),e._v(" "),n("li",[e._v("[ ] 更多 TypeScript 的优化技巧")]),e._v(" "),n("li",[e._v("[ ] 服务器渲染 SSR")])]),e._v(" "),n("h2",{attrs:{id:"_3-前端主要技术"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-前端主要技术"}},[e._v("#")]),e._v(" 3. 前端主要技术")]),e._v(" "),n("p",[e._v("所有技术都是当前最新的。")]),e._v(" "),n("ul",[n("li",[e._v("vue： ^2.6.6")]),e._v(" "),n("li",[e._v("typescript : ^3.2.1")]),e._v(" "),n("li",[e._v("element-ui： 2.6.3")]),e._v(" "),n("li",[e._v("vue-router : ^3.0.1")]),e._v(" "),n("li",[e._v("webpack： 4.28.4")]),e._v(" "),n("li",[e._v("vuex: ^3.0.1")]),e._v(" "),n("li",[e._v("axios：0.18.0")]),e._v(" "),n("li",[e._v("redux: 4.0.0")]),e._v(" "),n("li",[e._v("highlight.js： 9.15.6")]),e._v(" "),n("li",[e._v("marked：0.6.1")])]),e._v(" "),n("h2",{attrs:{id:"_4-5-分钟上手-typescript"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-分钟上手-typescript"}},[e._v("#")]),e._v(" 4. 5 分钟上手 TypeScript")]),e._v(" "),n("p",[e._v("如果没有一点点基础，可能没学过 TypeScript 的读者会看不懂往下的内容，所以先学点基础。")]),e._v(" "),n("p",[e._v("TypeScript 的静态类型检查是个好东西，可以避免很多不必要的错误, 不用在调试或者项目上线的时候才发现问题 。")]),e._v(" "),n("ul",[n("li",[e._v("类型注解")])]),e._v(" "),n("p",[e._v("TypeScript 里的类型注解是一种轻量级的为函数或变量添加约束的方式。变量定义时也要定义他的类型，比如常见的 ：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// 布尔值\nlet isDone: boolean = false; // 相当于 js 的 let isDone = false;\n// 变量定义之后不可以随便变更它的类型\nisDone = true // 不报错\nisDone = "我要变为字符串" // 报错\n')])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 数字\nlet decLiteral: number = 6; // 相当于 js 的 let decLiteral = 6;\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// 字符串\nlet name: string = "bob";  // 相当于 js 的 let name = "bob";\n')])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 数组\n // 第一种，可以在元素类型后面接上 []，表示由此类型元素组成的一个数组：\nlet list: number[] = [1, 2, 3]; // 相当于 js 的let list = [1, 2, 3];\n// 第二种方式是使用数组泛型，Array<元素类型>：\nlet list: Array<number> = [1, 2, 3]; // 相当于 js 的let list = [1, 2, 3];\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 在 TypeScript 中，我们使用接口（Interfaces）来定义 对象 的类型。\ninterface Person {\n    name: string;\n    age: number;\n}\nlet tom: Person = {\n    name: 'Tom',\n    age: 25\n};\n// 以上 对象 的代码相当于\nlet tom = {\n    name: 'Tom',\n    age: 25\n};\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// Any 可以随便变更类型 (当这个值可能来自于动态的内容，比如来自用户输入或第三方代码库)\nlet notSure: any = 4;\nnotSure = "我可以随便变更类型" // 不报错\nnotSure = false;  // 不报错\n')])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// Void 当一个函数没有返回值时，你通常会见到其返回值类型是 void\nfunction warnUser(): void {\n    console.log("This is my warning message");\n}\n')])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// 方法的参数也要定义类型，不知道就定义为 any\nfunction fetch(url: string, id : number, params: any): void {\n    console.log("fetch");\n}\n')])])]),n("p",[e._v("以上是最简单的一些知识点，更多知识请看 "),n("a",{attrs:{href:"https://www.tslang.cn/",target:"_blank",rel:"noopener noreferrer"}},[e._v("TypeScript 中文官网"),n("OutboundLink")],1)]),e._v(" "),n("h2",{attrs:{id:"_5-5-分钟上手-vue-typescript"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-5-分钟上手-vue-typescript"}},[e._v("#")]),e._v(" 5. 5 分钟上手 Vue +TypeScript")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://github.com/vuejs/vue-class-component",target:"_blank",rel:"noopener noreferrer"}},[e._v("vue-class-component"),n("OutboundLink")],1),e._v(" "),n("br"),e._v("\nvue-class-component 对  "),n("code",[e._v("Vue")]),e._v("  组件进行了一层封装，让  "),n("code",[e._v("Vue")]),e._v("  组件语法在结合了  "),n("code",[e._v("TypeScript")]),e._v("  语法之后更加扁平化：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<template>\n  <div>\n    <input v-model=\"msg\">\n    <p>prop: {{propMessage}}</p>\n    <p>msg: {{msg}}</p>\n    <p>helloMsg: {{helloMsg}}</p>\n    <p>computed msg: {{computedMsg}}</p>\n    <button @click=\"greet\">Greet</button>\n  </div>\n</template>\n\n<script>\nimport Vue from 'vue'\nimport Component from 'vue-class-component'\n\n@Component({\n  props: {\n    propMessage: String\n  }\n})\nexport default class App extends Vue {\n  // initial data\n  msg = 123\n\n  // use prop values for initial data\n  helloMsg = 'Hello, ' + this.propMessage\n\n  // lifecycle hook\n  mounted () {\n    this.greet()\n  }\n\n  // computed\n  get computedMsg () {\n    return 'computed ' + this.msg\n  }\n\n  // method\n  greet () {\n    alert('greeting: ' + this.msg)\n  }\n}\n<\/script>\n")])])]),n("p",[e._v("上面的代码跟下面的代码作用是一样的:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<template>\n  <div>\n    <input v-model=\"msg\">\n    <p>prop: {{propMessage}}</p>\n    <p>msg: {{msg}}</p>\n    <p>helloMsg: {{helloMsg}}</p>\n    <p>computed msg: {{computedMsg}}</p>\n    <button @click=\"greet\">Greet</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  // 属性\n  props: {\n    propMessage: {\n      type: String\n    }\n  },\n  data () {\n    return {\n      msg: 123,\n      helloMsg: 'Hello, ' + this.propMessage\n    }\n  },\n  // 声明周期钩子\n  mounted () {\n    this.greet()\n  },\n  // 计算属性\n  computed: {\n    computedMsg () {\n      return 'computed ' + this.msg\n    }\n  },\n  // 方法\n  methods: {\n    greet () {\n      alert('greeting: ' + this.msg)\n    }\n  },\n}\n<\/script>\n")])])]),n("ul",[n("li",[n("a",{attrs:{href:"https://github.com/kaorun343/vue-property-decorator",target:"_blank",rel:"noopener noreferrer"}},[e._v("vue-property-decorator"),n("OutboundLink")],1)])]),e._v(" "),n("p",[e._v("vue-property-decorator 是在  "),n("code",[e._v("vue-class-component")]),e._v("  上增强了更多的结合  "),n("code",[e._v("Vue")]),e._v("  特性的装饰器，新增了这 7 个装饰器：")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("@Emit")])]),e._v(" "),n("li",[n("code",[e._v("@Inject")])]),e._v(" "),n("li",[n("code",[e._v("@Model")])]),e._v(" "),n("li",[n("code",[e._v("@Prop")])]),e._v(" "),n("li",[n("code",[e._v("@Provide")])]),e._v(" "),n("li",[n("code",[e._v("@Watch")])]),e._v(" "),n("li",[n("code",[e._v("@Component")]),e._v(" (从  "),n("code",[e._v("vue-class-component")]),e._v("  继承)")])]),e._v(" "),n("p",[e._v("在这里列举几个常用的"),n("code",[e._v("@Prop/@Watch/@Component")]),e._v(", 更多信息，详见"),n("a",{attrs:{href:"https://github.com/kaorun343/vue-property-decorator",target:"_blank",rel:"noopener noreferrer"}},[e._v("官方文档"),n("OutboundLink")],1)]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import { Component, Emit, Inject, Model, Prop, Provide, Vue, Watch } from 'vue-property-decorator'\n\n@Component\nexport class MyComponent extends Vue {\n\n  @Prop()\n  propA: number = 1\n\n  @Prop({ default: 'default value' })\n  propB: string\n\n  @Prop([String, Boolean])\n  propC: string | boolean\n\n  @Prop({ type: null })\n  propD: any\n\n  @Watch('child')\n  onChildChanged(val: string, oldVal: string) { }\n}\n")])])]),n("p",[e._v("上面的代码相当于：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("export default {\n  props: {\n    checked: Boolean,\n    propA: Number,\n    propB: {\n      type: String,\n      default: 'default value'\n    },\n    propC: [String, Boolean],\n    propD: { type: null }\n  }\n  methods: {\n    onChildChanged(val, oldVal) { }\n  },\n  watch: {\n    'child': {\n      handler: 'onChildChanged',\n      immediate: false,\n      deep: false\n    }\n  }\n}\n")])])]),n("ul",[n("li",[e._v("vuex-class\n"),n("a",{attrs:{href:"https://github.com/ktsn/vuex-class",target:"_blank",rel:"noopener noreferrer"}},[e._v("vuex-class"),n("OutboundLink")],1),e._v(" ：在  "),n("code",[e._v("vue-class-component")]),e._v("  写法中 绑定  "),n("code",[e._v("vuex")]),e._v(" 。")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import Vue from 'vue'\nimport Component from 'vue-class-component'\nimport {\n  State,\n  Getter,\n  Action,\n  Mutation,\n  namespace\n} from 'vuex-class'\n\nconst someModule = namespace('path/to/module')\n\n@Component\nexport class MyComp extends Vue {\n  @State('foo') stateFoo\n  @State(state => state.bar) stateBar\n  @Getter('foo') getterFoo\n  @Action('foo') actionFoo\n  @Mutation('foo') mutationFoo\n  @someModule.Getter('foo') moduleGetterFoo\n\n  // If the argument is omitted, use the property name\n  // for each state/getter/action/mutation type\n  @State foo\n  @Getter bar\n  @Action baz\n  @Mutation qux\n\n  created () {\n    this.stateFoo // -> store.state.foo\n    this.stateBar // -> store.state.bar\n    this.getterFoo // -> store.getters.foo\n    this.actionFoo({ value: true }) // -> store.dispatch('foo', { value: true })\n    this.mutationFoo({ value: true }) // -> store.commit('foo', { value: true })\n    this.moduleGetterFoo // -> store.getters['path/to/module/foo']\n  }\n}\n")])])]),n("h2",{attrs:{id:"_6-用-vue-cli-搭建-项目"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-用-vue-cli-搭建-项目"}},[e._v("#")]),e._v(" 6. 用 vue-cli 搭建 项目")]),e._v(" "),n("p",[e._v("笔者使用最新的 vue-cli 3 搭建项目，详细的教程，请看我之前写的 "),n("a",{attrs:{href:"https://segmentfault.com/a/1190000016423943",target:"_blank",rel:"noopener noreferrer"}},[e._v("vue-cli3.x 新特性及踩坑记"),n("OutboundLink")],1),e._v("，里面已经有详细讲解 ，但文章里面的配置和此项目不同的是，我加入了 TypeScript ，其他的配置都是 vue-cli 本来配好的了。详情请看 "),n("a",{attrs:{href:"https://cli.vuejs.org/zh/guide/creating-a-project.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("vue-cli 官网"),n("OutboundLink")],1),e._v(" 。")]),e._v(" "),n("h3",{attrs:{id:"_6-1-安装及构建项目目录"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-安装及构建项目目录"}},[e._v("#")]),e._v(" 6.1 安装及构建项目目录")]),e._v(" "),n("p",[e._v("安装的依赖：")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/12890819-17027bcbe9b8be71.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:""}})]),e._v(" "),n("p",[e._v("安装过程选择的一些配置：")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/12890819-554bf777ccbf942a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:""}})]),e._v(" "),n("p",[e._v("搭建好之后，初始项目结构长这样：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("├── public                          // 静态页面\n\n├── src                             // 主目录\n\n    ├── assets                      // 静态资源\n\n    ├── components                  // 组件\n\n    ├── views                       // 页面\n\n    ├── App.vue                     // 页面主入口\n\n    ├── main.ts                     // 脚本主入口\n\n    ├── router.ts                   // 路由\n\n    ├── shims-tsx.d.ts              // 相关 tsx 模块注入\n\n    ├── shims-vue.d.ts              // Vue 模块注入\n\n    └── store.ts                    // vuex 配置\n\n├── tests                           // 测试用例\n\n├── .eslintrc.js                    // eslint 相关配置\n\n├── .gitignore                      // git 忽略文件配置\n\n├── babel.config.js                 // babel 配置\n\n├── postcss.config.js               // postcss 配置\n\n├── package.json                    // 依赖\n\n└── tsconfig.json                   // ts 配置\n\n")])])]),n("p",[e._v("奔着 "),n("strong",[e._v("大型项目的结构")]),e._v(" 来改造项目结构，改造后 :")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("\n├── public                          // 静态页面\n\n├── src                             // 主目录\n\n    ├── assets                      // 静态资源\n\n    ├── filters                     // 过滤\n\n    ├── store                       // vuex 配置\n\n    ├── less                        // 样式\n\n    ├── utils                       // 工具方法(axios封装，全局方法等)\n\n    ├── views                       // 页面\n\n    ├── App.vue                     // 页面主入口\n\n    ├── main.ts                     // 脚本主入口\n\n    ├── router.ts                   // 路由\n\n    ├── shime-global.d.ts           // 相关 全局或者插件 模块注入\n\n    ├── shims-tsx.d.ts              // 相关 tsx 模块注入\n\n    ├── shims-vue.d.ts              // Vue 模块注入, 使 TypeScript 支持 *.vue 后缀的文件\n\n├── tests                           // 测试用例\n\n├── .eslintrc.js                    // eslint 相关配置\n\n├── postcss.config.js               // postcss 配置\n\n├── .gitignore                      // git 忽略文件配置\n\n├── babel.config.js                 // preset 记录\n\n├── package.json                    // 依赖\n\n├── README.md                       // 项目 readme\n\n├── tsconfig.json                   // ts 配置\n\n└── vue.config.js                   // webpack 配置\n\n")])])]),n("p",[e._v("tsconfig.json 文件中指定了用来编译这个项目的根文件和编译选项。\n本项目的 tsconfig.json 配置如下 ：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('{\n    // 编译选项\n  "compilerOptions": {\n    // 编译输出目标 ES 版本\n    "target": "esnext",\n    // 采用的模块系统\n    "module": "esnext",\n    // 以严格模式解析\n    "strict": true,\n    "jsx": "preserve",\n    // 从 tslib 导入外部帮助库: 比如__extends，__rest等\n    "importHelpers": true,\n    // 如何处理模块\n    "moduleResolution": "node",\n    // 启用装饰器\n    "experimentalDecorators": true,\n    "esModuleInterop": true,\n    // 允许从没有设置默认导出的模块中默认导入\n    "allowSyntheticDefaultImports": true,\n    // 定义一个变量就必须给它一个初始值\n    "strictPropertyInitialization" : false,\n    // 允许编译javascript文件\n    "allowJs": true,\n    // 是否包含可以用于 debug 的 sourceMap\n    "sourceMap": true,\n    // 忽略 this 的类型检查, Raise error on this expressions with an implied any type.\n    "noImplicitThis": false,\n    // 解析非相对模块名的基准目录\n    "baseUrl": ".",\n    // 给错误和消息设置样式，使用颜色和上下文。\n    "pretty": true,\n    // 设置引入的定义文件\n    "types": ["webpack-env", "mocha", "chai"],\n    // 指定特殊模块的路径\n    "paths": {\n      "@/*": ["src/*"]\n    },\n    // 编译过程中需要引入的库文件的列表\n    "lib": ["esnext", "dom", "dom.iterable", "scripthost"]\n  },\n  // ts 管理的文件\n  "include": [\n    "src/**/*.ts",\n    "src/**/*.tsx",\n    "src/**/*.vue",\n    "tests/**/*.ts",\n    "tests/**/*.tsx"\n  ],\n  // ts 排除的文件\n  "exclude": ["node_modules"]\n}\n\n')])])]),n("p",[e._v("更多配置请看官网的 tsconfig.json 的 "),n("a",{attrs:{href:"https://www.tslang.cn/docs/handbook/compiler-options.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("编译选项"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("本项目的 vue.config.js:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('const path = require("path");\nconst sourceMap = process.env.NODE_ENV === "development";\n\nmodule.exports = {\n  // 基本路径\n  publicPath: "./",\n  // 输出文件目录\n  outputDir: "dist",\n  // eslint-loader 是否在保存的时候检查\n  lintOnSave: false,\n  // webpack配置\n  // see https://github.com/vuejs/vue-cli/blob/dev/docs/webpack.md\n  chainWebpack: () => {},\n  configureWebpack: config => {\n    if (process.env.NODE_ENV === "production") {\n      // 为生产环境修改配置...\n      config.mode = "production";\n    } else {\n      // 为开发环境修改配置...\n      config.mode = "development";\n    }\n\n    Object.assign(config, {\n      // 开发生产共同配置\n      resolve: {\n        extensions: [".js", ".vue", ".json", ".ts", ".tsx"],\n        alias: {\n          vue$: "vue/dist/vue.js",\n          "@": path.resolve(__dirname, "./src")\n        }\n      }\n    });\n  },\n  // 生产环境是否生成 sourceMap 文件\n  productionSourceMap: sourceMap,\n  // css相关配置\n  css: {\n    // 是否使用css分离插件 ExtractTextPlugin\n    extract: true,\n    // 开启 CSS source maps?\n    sourceMap: false,\n    // css预设器配置项\n    loaderOptions: {},\n    // 启用 CSS modules for all css / pre-processor files.\n    modules: false\n  },\n  // use thread-loader for babel & TS in production build\n  // enabled by default if the machine has more than 1 cores\n  parallel: require("os").cpus().length > 1,\n  // PWA 插件相关配置\n  // see https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-pwa\n  pwa: {},\n  // webpack-dev-server 相关配置\n  devServer: {\n    open: process.platform === "darwin",\n    host: "localhost",\n    port: 3001, //8080,\n    https: false,\n    hotOnly: false,\n    proxy: {\n      // 设置代理\n      // proxy all requests starting with /api to jsonplaceholder\n      "/api": {\n        // target: "https://emm.cmccbigdata.com:8443/",\n        target: "http://localhost:3000/",\n        // target: "http://47.106.136.114/",\n        changeOrigin: true,\n        ws: true,\n        pathRewrite: {\n          "^/api": ""\n        }\n      }\n    },\n    before: app => {}\n  },\n  // 第三方插件配置\n  pluginOptions: {\n    // ...\n  }\n};\n\n')])])]),n("h3",{attrs:{id:"_6-2-安装-element-ui"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-安装-element-ui"}},[e._v("#")]),e._v(" 6.2 安装 element-ui")]),e._v(" "),n("p",[e._v("本来想搭配 iview-ui 来用的，但后续还想把这个项目搞成 ssr 的，而 vue + typescript + iview + Nuxt.js 的服务端渲染还有不少坑, 而 vue + typescript + element + Nuxt.js 对 ssr 的支持已经不错了，所以选择了 element-ui 。")]),e._v(" "),n("p",[e._v("安装：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("npm i element-ui -S\n")])])]),n("p",[e._v("按需引入, 借助  "),n("a",{attrs:{href:"https://github.com/QingWei-Li/babel-plugin-component",target:"_blank",rel:"noopener noreferrer"}},[e._v("babel-plugin-component"),n("OutboundLink")],1),e._v("，我们可以只引入需要的组件，以达到减小项目体积的目的。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("npm install babel-plugin-component -D\n")])])]),n("p",[e._v("然后，将 babel.config.js 修改为：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('module.exports = {\n  presets: ["@vue/app"],\n  plugins: [\n    [\n      "component",\n      {\n        libraryName: "element-ui",\n        styleLibraryName: "theme-chalk"\n      }\n    ]\n  ]\n};\n')])])]),n("p",[e._v("接下来，如果你只希望引入部分组件，比如 Button 和 Select，那么需要在 main.js 中写入以下内容：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import Vue from 'vue';\nimport { Button, Select } from 'element-ui';\nimport App from './App.vue';\n\nVue.component(Button.name, Button);\nVue.component(Select.name, Select);\n/* 或写为\n * Vue.use(Button)\n * Vue.use(Select)\n */\n\nnew Vue({\n  el: '#app',\n  render: h => h(App)\n});\n")])])]),n("h3",{attrs:{id:"_6-3-完善项目目录与文件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-完善项目目录与文件"}},[e._v("#")]),e._v(" 6.3 完善项目目录与文件")]),e._v(" "),n("h4",{attrs:{id:"route"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#route"}},[e._v("#")]),e._v(" route")]),e._v(" "),n("p",[e._v("使用路由懒加载功能。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('export default new Router({\n  mode: "history",\n  routes: [\n    {\n      path: "/",\n      name: "home",\n      component: () => import(/* webpackChunkName: "home" */ "./views/home.vue")\n    },\n    {\n      path: "/articles",\n      name: "articles",\n      // route level code-splitting\n      // this generates a separate chunk (articles.[hash].js) for this route\n      // which is lazy-loaded when the route is visited.\n      component: () =>\n        import(/* webpackChunkName: "articles" */ "./views/articles.vue")\n    },\n  ]\n});\n')])])]),n("h4",{attrs:{id:"utils"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#utils"}},[e._v("#")]),e._v(" utils")]),e._v(" "),n("ul",[n("li",[e._v("utils/utils.ts 常用函数的封装， 比如 事件的节流（throttle）与防抖（debounce）方法：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// fn是我们需要包装的事件回调, delay是时间间隔的阈值\nexport function throttle(fn: Function, delay: number) {\n  // last为上一次触发回调的时间, timer是定时器\n  let last = 0,\n    timer: any = null;\n  // 将throttle处理结果当作函数返回\n  return function() {\n    // 保留调用时的this上下文\n    let context = this;\n    // 保留调用时传入的参数\n    let args = arguments;\n    // 记录本次触发回调的时间\n    let now = +new Date();\n    // 判断上次触发的时间和本次触发的时间差是否小于时间间隔的阈值\n    if (now - last < delay) {\n      // 如果时间间隔小于我们设定的时间间隔阈值，则为本次触发操作设立一个新的定时器\n      clearTimeout(timer);\n      timer = setTimeout(function() {\n        last = now;\n        fn.apply(context, args);\n      }, delay);\n    } else {\n      // 如果时间间隔超出了我们设定的时间间隔阈值，那就不等了，无论如何要反馈给用户一次响应\n      last = now;\n      fn.apply(context, args);\n    }\n  };\n}\n")])])]),n("ul",[n("li",[e._v("utils/config.ts 配置文件，比如 github 授权登录的回调地址、client_id、client_secret 等。")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const config = {\n  'oauth_uri': 'https://github.com/login/oauth/authorize',\n  'redirect_uri': 'https://biaochenxuying.cn/login',\n  'client_id': 'XXXXXXXXXX',\n  'client_secret': 'XXXXXXXXXX',\n};\n\n// 本地开发环境下\nif (process.env.NODE_ENV === 'development') {\n  config.redirect_uri = \"http://localhost:3001/login\"\n  config.client_id = \"502176cec65773057a9e\"\n  config.client_secret = \"65d444de381a026301a2c7cffb6952b9a86ac235\"\n}\nexport default config;\n")])])]),n("p",[e._v("如果你的生产环境也要 github 登录授权的话，请在 github 上申请一个 Oauth App ，把你的 redirect_uri，client_id，client_secret 的信息填在 config 里面即可。具体详情请看我写的这篇文章 "),n("a",{attrs:{href:"https://biaochenxuying.cn/articleDetail?article_id=5c7bd34e42b55e2ecc90976d",target:"_blank",rel:"noopener noreferrer"}},[e._v("github 授权登录教程与如何设计第三方授权登录的用户表"),n("OutboundLink")],1)]),e._v(" "),n("ul",[n("li",[e._v("utils/urls.ts 请求接口地址，统一管理。")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// url的链接\nexport const urls: object = {\n  login: "login",\n  register: "register",\n  getArticleList: "getArticleList",\n};\nexport default urls;\n')])])]),n("ul",[n("li",[e._v("utils/https.ts axios 请求的封装。")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('import axios from "axios";\n\n// 创建axios实例\nlet service: any = {};\nservice = axios.create({\n    baseURL: "/api", // api的base_url\n    timeout: 50000 // 请求超时时间\n  });\n\n// request拦截器 axios的一些配置\nservice.interceptors.request.use(\n  (config: any) => {\n    return config;\n  },\n  (error: any) => {\n    // Do something with request error\n    console.error("error:", error); // for debug\n    Promise.reject(error);\n  }\n);\n\n// respone拦截器 axios的一些配置\nservice.interceptors.response.use(\n  (response: any) => {\n    return response;\n  },\n  (error: any) => {\n    console.error("error:" + error); // for debug\n    return Promise.reject(error);\n  }\n);\n\nexport default service;\n')])])]),n("p",[e._v("把 urls 和 https 挂载到 main.ts 里面的 Vue 的 prototype 上面。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('import service from "./utils/https";\nimport urls from "./utils/urls";\n\nVue.prototype.$https = service; // 其他页面在使用 axios 的时候直接  this.$http 就可以了\nVue.prototype.$urls = urls; // 其他页面在使用 urls 的时候直接  this.$urls 就可以了\n')])])]),n("p",[e._v("然后就可以统一管理接口，而且调用起来也很方便啦。比如下面 文章列表的请求。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('async handleSearch() {\n    this.isLoading = true;\n    const res: any = await this.$https.get(this.$urls.getArticleList, {\n      params: this.params\n    });\n    this.isLoading = false;\n    if (res.status === 200) {\n      if (res.data.code === 0) {\n        const data: any = res.data.data;\n        this.articlesList = [...this.articlesList, ...data.list];\n        this.total = data.count;\n        this.params.pageNum++;\n        if (this.total === this.articlesList.length) {\n          this.isLoadEnd = true;\n        }\n      } else {\n        this.$message({\n          message: res.data.message,\n          type: "error"\n        });\n      }\n    } else {\n      this.$message({\n        message: "网络错误!",\n        type: "error"\n      });\n    }\n  }\n')])])]),n("h4",{attrs:{id:"store-vuex"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#store-vuex"}},[e._v("#")]),e._v(" store ( Vuex )")]),e._v(" "),n("p",[e._v("一般大型的项目都有很多模块的，比如本项目中有公共信息(比如 token )、 用户模块、文章模块。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("├── modules                         // 模块\n\n    ├── user.ts                     // 用户模块\n\n    ├── article.ts                 // 文章模块\n\n├── types.ts                        // 类型\n\n└── index.ts                        // vuex 主入口\n")])])]),n("ul",[n("li",[e._v("store/index.ts 存放公共的信息，并导入其他模块")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('import Vue from "vue";\nimport Vuex from "vuex";\nimport * as types from "./types";\nimport user from "./modules/user";\nimport article from "./modules/article";\n\nVue.use(Vuex);\nconst initPageState = () => {\n  return {\n    token: ""\n  };\n};\nconst store = new Vuex.Store({\n  strict: process.env.NODE_ENV !== "production",\n  // 具体模块\n  modules: {\n    user,\n    article\n  },\n  state: initPageState(),\n  mutations: {\n    [types.SAVE_TOKEN](state: any, pageState: any) {\n      for (const prop in pageState) {\n        state[prop] = pageState[prop];\n      }\n    }\n  },\n  actions: {}\n});\n\nexport default store;\n')])])]),n("ul",[n("li",[e._v("types.ts")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// 公共 token\nexport const SAVE_TOKEN = "SAVE_TOKEN";\n\n// 用户\nexport const SAVE_USER = "SAVE_USER";\n')])])]),n("ul",[n("li",[e._v("user.ts")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('import * as types from "../types";\n\nconst initPageState = () => {\n  return {\n    userInfo: {\n      _id: "",\n      name: "",\n      avator: ""\n    }\n  };\n};\nconst user = {\n  state: initPageState(),\n  mutations: {\n    [types.SAVE_USER](state: any, pageState: any) {\n      for (const prop in pageState) {\n        state[prop] = pageState[prop];\n      }\n    }\n  },\n  actions: {}\n};\n\nexport default user;\n\n')])])]),n("h2",{attrs:{id:"_7-markdown-渲染"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-markdown-渲染"}},[e._v("#")]),e._v(" 7. markdown 渲染")]),e._v(" "),n("p",[e._v("markdown 渲染效果图:")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/12890819-cf92cfb3f222c4fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"markdown 渲染效果图"}})]),e._v(" "),n("p",[e._v("markdown 渲染 采用了开源的 marked， 代码高亮用了 highlight.js 。")]),e._v(" "),n("p",[e._v("用法：")]),e._v(" "),n("p",[e._v("第一步：npm i marked highlight.js --save")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("npm i marked highlight.js --save\n")])])]),n("p",[e._v("第二步： 导入封装成 markdown.js，将文章详情由字符串转成 html， 并抽离出文章目录。")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://www.cherylgood.cn/detail/5bdaf4722382b4646c27143b.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("marked 的封装"),n("OutboundLink")],1),e._v(" 得感谢这位老哥。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('const highlight = require("highlight.js");\nconst marked = require("marked");\nconst tocObj = {\n  add: function(text, level) {\n    var anchor = `#toc${level}${++this.index}`;\n    this.toc.push({ anchor: anchor, level: level, text: text });\n    return anchor;\n  },\n  // 使用堆栈的方式处理嵌套的ul,li，level即ul的嵌套层次，1是最外层\n  // <ul>\n  //   <li></li>\n  //   <ul>\n  //     <li></li>\n  //   </ul>\n  //   <li></li>\n  // </ul>\n  toHTML: function() {\n    let levelStack = [];\n    let result = "";\n    const addStartUL = () => {\n      result += \'<ul class="anchor-ul" id="anchor-fix">\';\n    };\n    const addEndUL = () => {\n      result += "</ul>\\n";\n    };\n    const addLI = (anchor, text) => {\n      result +=\n        \'<li><a class="toc-link" href="#\' + anchor + \'">\' + text + "<a></li>\\n";\n    };\n\n    this.toc.forEach(function(item) {\n      let levelIndex = levelStack.indexOf(item.level);\n      // 没有找到相应level的ul标签，则将li放入新增的ul中\n      if (levelIndex === -1) {\n        levelStack.unshift(item.level);\n        addStartUL();\n        addLI(item.anchor, item.text);\n      } // 找到了相应level的ul标签，并且在栈顶的位置则直接将li放在此ul下\n      else if (levelIndex === 0) {\n        addLI(item.anchor, item.text);\n      } // 找到了相应level的ul标签，但是不在栈顶位置，需要将之前的所有level出栈并且打上闭合标签，最后新增li\n      else {\n        while (levelIndex--) {\n          levelStack.shift();\n          addEndUL();\n        }\n        addLI(item.anchor, item.text);\n      }\n    });\n    // 如果栈中还有level，全部出栈打上闭合标签\n    while (levelStack.length) {\n      levelStack.shift();\n      addEndUL();\n    }\n    // 清理先前数据供下次使用\n    this.toc = [];\n    this.index = 0;\n    return result;\n  },\n  toc: [],\n  index: 0\n};\n\nclass MarkUtils {\n  constructor() {\n    this.rendererMD = new marked.Renderer();\n    this.rendererMD.heading = function(text, level, raw) {\n      var anchor = tocObj.add(text, level);\n      return `<h${level} id=${anchor}>${text}</h${level}>\\n`;\n    };\n    highlight.configure({ useBR: true });\n    marked.setOptions({\n      renderer: this.rendererMD,\n      headerIds: false,\n      gfm: true,\n      tables: true,\n      breaks: false,\n      pedantic: false,\n      sanitize: false,\n      smartLists: true,\n      smartypants: false,\n      highlight: function(code) {\n        return highlight.highlightAuto(code).value;\n      }\n    });\n  }\n\n  async marked(data) {\n    if (data) {\n      let content = await marked(data); // 文章内容\n      let toc = tocObj.toHTML(); // 文章目录\n      return { content: content, toc: toc };\n    } else {\n      return null;\n    }\n  }\n}\n\nconst markdown = new MarkUtils();\n\nexport default markdown;\n')])])]),n("p",[e._v("第三步： 使用")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('import markdown from "@/utils/markdown";\n\n// 获取文章详情\nasync handleSearch() {\n    const res: any = await this.$https.post(\n      this.$urls.getArticleDetail,\n      this.params\n    );\n    if (res.status === 200) {\n      if (res.data.code === 0) {\n        this.articleDetail = res.data.data;\n       // 使用 marked 转换\n        const article = markdown.marked(res.data.data.content);\n        article.then((response: any) => {\n          this.articleDetail.content = response.content;\n          this.articleDetail.toc = response.toc;\n        });\n      } else {\n        // ...\n    } else {\n     // ...\n    }\n  }\n\n// 渲染\n<div id="content"\n       class="article-detail"\n       v-html="articleDetail.content">\n</div>\n')])])]),n("p",[e._v("第四步：引入 monokai_sublime 的 css 样式")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<link href="http://cdn.bootcss.com/highlight.js/8.0/styles/monokai_sublime.min.css" rel="stylesheet">\n')])])]),n("p",[e._v("第五步：对 markdown 样式的补充")]),e._v(" "),n("p",[e._v("如果不补充样式，是没有黑色背景的，字体大小等也会比较小，图片也不会居中显示")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("/*对 markdown 样式的补充*/\npre {\n    display: block;\n    padding: 10px;\n    margin: 0 0 10px;\n    font-size: 14px;\n    line-height: 1.42857143;\n    color: #abb2bf;\n    background: #282c34;\n    word-break: break-all;\n    word-wrap: break-word;\n    overflow: auto;\n}\nh1,h2,h3,h4,h5,h6{\n    margin-top: 1em;\n    /* margin-bottom: 1em; */\n}\nstrong {\n    font-weight: bold;\n}\n\np > code:not([class]) {\n    padding: 2px 4px;\n    font-size: 90%;\n    color: #c7254e;\n    background-color: #f9f2f4;\n    border-radius: 4px;\n}\np img{\n    /* 图片居中 */\n    margin: 0 auto;\n    display: flex;\n}\n\n#content {\n    font-family: \"Microsoft YaHei\",  'sans-serif';\n    font-size: 16px;\n    line-height: 30px;\n}\n\n#content .desc ul,#content .desc ol {\n    color: #333333;\n    margin: 1.5em 0 0 25px;\n}\n\n#content .desc h1, #content .desc h2 {\n    border-bottom: 1px solid #eee;\n    padding-bottom: 10px;\n}\n\n#content .desc a {\n    color: #009a61;\n}\n")])])]),n("h2",{attrs:{id:"_8-注意点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-注意点"}},[e._v("#")]),e._v(" 8. 注意点")]),e._v(" "),n("ul",[n("li",[e._v("关于 页面")])]),e._v(" "),n("p",[e._v("对于 关于 的页面，其实是一篇文章来的，根据文章类型 type 来决定的，数据库里面 type 为 3\n的文章，只能有一篇就是 博主介绍 ；达到了想什么时候修改内容都可以。")]),e._v(" "),n("p",[e._v("所以当 "),n("strong",[e._v("当前路由")]),e._v(" === '/about' 时就是请求类型为 博主介绍 的文章。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("type: 3,  // 文章类型: 1：普通文章；2：是博主简历；3 ：是博主简介；\n")])])]),n("ul",[n("li",[e._v("移动端适配\n移动端使用 rem 单位适配。")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 屏幕适配（ window.screen.width / 移动端设计稿宽 * 100）也即是 (window.screen.width / 750 * 100)  ——*100 为了方便计算。即 font-size 值是手机 deviceWidth 与设计稿比值的 100 倍\ndocument.getElementsByTagName('html')[0].style.fontSize = window.screen.width / 7.5 + 'px';\n")])])]),n("p",[e._v("如上：通过查询屏幕宽度，动态的设置 html 的 font-size 值，移动端的设计稿大多以宽为 750 px 来设置的。")]),e._v(" "),n("p",[e._v("比如在设计图上一个 150 * 250 的盒子(单位 px)：")]),e._v(" "),n("p",[e._v("原本在 css 中的写法：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("width: 150px;\nheigth: 250px;\n")])])]),n("p",[e._v("通过上述换算后，在 css 中对应的 rem 值只需要写：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("width: 1.5rem; // 150 / 100 rem\nheigth: 2.5rem; // 250 / 100 rem\n")])])]),n("p",[e._v("如果你的移动端的设计稿是以宽为 1080 px 来设置的话，就用 window.screen.width / 10.8 吧。")]),e._v(" "),n("h2",{attrs:{id:"_9-踩坑记"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-踩坑记"}},[e._v("#")]),e._v(" 9. 踩坑记")]),e._v(" "),n("ul",[n("li",[n("strong",[e._v("1. 让 vue 识别全局方法/变量")])])]),e._v(" "),n("ol",[n("li",[e._v("我们经常在 main.ts 中给 vue.prototype 挂载实例或者内容，以方便在组件里面使用。")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('import service from "./utils/https";\nimport urls from "./utils/urls";\n\nVue.prototype.$https = service; // 其他页面在使用 axios 的时候直接  this.$http 就可以了\nVue.prototype.$urls = urls; // 其他页面在使用 urls 的时候直接  this.$urls 就可以了\n')])])]),n("p",[e._v("然而当你在组件中直接 this.$http 或者 this.$urls 时会报错的，那是因为 $http 和 $urls 属性，并没有在 vue 实例中声明。")]),e._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[e._v("再比如使用 Element-uI 的 meesage。")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('import { Message } from "element-ui";\n\nVue.prototype.$message = Message;\n')])])]),n("p",[e._v("之前用法如下图：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  this.$message({\n    message: '恭喜你，这是一条成功消息',\n    type: 'success'\n  })\n")])])]),n("p",[e._v("然而还是会报错的。")]),e._v(" "),n("p",[e._v("再比如 监听路由的变化：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('import { Vue, Watch } from "vue-property-decorator";\nimport Component from "vue-class-component";\nimport { Route } from "vue-router";\n\n@Component\nexport default class App extends Vue {\n\n  @Watch("$route")\n  routeChange(val: Route, oldVal: Route) {\n      //  do something\n  }\n}\n')])])]),n("p",[e._v("只是这样写的话，监听 $route 还是会报错的。")]),e._v(" "),n("p",[e._v("想要以上三种做法都正常执行，就还要补充如下内容：")]),e._v(" "),n("p",[n("strong",[e._v("在 src 下的 shims-vue.d.ts 中加入要挂载的内容。")]),e._v(" 表示 vue 里面的 this 下有这些东西。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('import VueRouter, { Route } from "vue-router";\n\ndeclare module "vue/types/vue" {\n  interface Vue {\n    $router: VueRouter; // 这表示this下有这个东西\n    $route: Route;\n    $https: any; // 不知道类型就定为 any 吧（偷懒）\n    $urls: any;\n    $Message: any;\n  }\n}\n')])])]),n("ul",[n("li",[n("strong",[e._v("2. 引入的模块要声明")])])]),e._v(" "),n("p",[e._v("比如 在组件里面使用 window.document 或者 document.querySelector 的时候会报错的，npm run build 不给通过。")]),e._v(" "),n("p",[e._v("再比如：按需引用 element 的组件与动画组件:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('import { Button } from "element-ui";\nimport CollapseTransition from "element-ui/lib/transitions/collapse-transition";\n')])])]),n("p",[e._v("npm run serve 时可以执行，但是在 npm run build 的时候，会直接报错的，因为没有声明。")]),e._v(" "),n("p",[e._v("正确做法：")]),e._v(" "),n("p",[e._v("我在 src 下新建一个文件 shime-global.d.ts ，加入内容如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// 声明全局的 window ，不然使用 window.XX 时会报错\ndeclare var window: Window;\ndeclare var document: Document;\n\ndeclare module "element-ui/lib/transitions/collapse-transition";\ndeclare module "element-ui";\n')])])]),n("p",[e._v("当然，这个文件你加在其他地方也可以，起其他名字都 OK。")]),e._v(" "),n("p",[e._v("但是即使配置了以上方法之后，有些地方使用 document.XXX ，比如 document.title 的时候，npm run build 还是通过不了，所以只能这样了：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<script lang="ts">\n// 在用到 document.XXX  的文件中声明一下即可\ndeclare var document: any;\n// 此处省略 XXXX 多的代码\n<\/script>\n')])])]),n("ul",[n("li",[n("strong",[e._v("3. this 的类型检查")])])]),e._v(" "),n("p",[e._v("比如之前的 事件的节流（throttle）与防抖（debounce）方法：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("export function throttle(fn: Function, delay: number) {\n  return function() {\n    // 保留调用时的 this 上下文\n    let context = this;\n}\n")])])]),n("p",[e._v("function 里面的 this 在 npm run serve 时会报错的，因为 tyescript 检测到它不是在类(class)里面。")]),e._v(" "),n("p",[e._v("正确做法：")]),e._v(" "),n("p",[e._v('在根目录的 tsconfig.json 里面加上 "noImplicitThis": false ，忽略 this 的类型检查。')]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// 忽略 this 的类型检查, Raise error on this expressions with an implied any type.\n"noImplicitThis": false,\n')])])]),n("ul",[n("li",[n("strong",[e._v("4. import 的 .vue 文件")])])]),e._v(" "),n("p",[e._v("import .vue 的文件的时候，要补全 .vue 的后缀，不然 npm run build 会报错的。")]),e._v(" "),n("p",[e._v("比如：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('import Nav from "@/components/nav"; // @ is an alias to /src\nimport Footer from "@/components/footer"; // @ is an alias to /src\n')])])]),n("p",[e._v("要修改为：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('import Nav from "@/components/nav.vue"; // @ is an alias to /src\nimport Footer from "@/components/footer.vue"; // @ is an alias to /src\n')])])]),n("ul",[n("li",[n("strong",[e._v("5. 装饰器 @Component")])])]),e._v(" "),n("p",[e._v("报错。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<script lang="ts">\nimport { Vue, Component } from "vue-property-decorator";\nexport default class LoadingCustom extends Vue {}\n<\/script>\n')])])]),n("p",[e._v("以下才是正确，因为这里的 Vue 是从 vue-property-decorator import 来的。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<script lang="ts">\nimport { Vue, Component } from "vue-property-decorator";\n\n@Component\nexport default class LoadingCustom extends Vue {}\n<\/script>\n')])])]),n("ul",[n("li",[n("strong",[e._v("6. 路由的组件导航守卫失效")])])]),e._v(" "),n("p",[e._v("vue-class-component 官网里面的路由的导航钩子的用法是没有效果的 "),n("a",{attrs:{href:"https://github.com/vuejs/vue-class-component#adding-custom-hooks",target:"_blank",rel:"noopener noreferrer"}},[e._v("Adding Custom Hooks"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("路由的导航钩子不属于 Vue 本身，这会导致 class 组件转义到配置对象时导航钩子无效，因此如果要使用导航钩子需要在 router 的配置里声明（网上别人说的，还没实践，不确定是否可行）。")]),e._v(" "),n("ul",[n("li",[n("p",[n("strong",[e._v("7. tsconfig.json 的 strictPropertyInitialization 设为 false，不然你定义一个变量就必须给它一个初始值。")])])]),e._v(" "),n("li",[n("p",[n("strong",[e._v("position: sticky;")])])])]),e._v(" "),n("p",[e._v("本项目中的文章详情的目录就是用了 sticky。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(".anchor {\n  position: sticky;\n  top: 213px;\n  margin-top: 213px;\n}\n")])])]),n("p",[e._v("position:sticky 是 css 定位新增属性；可以说是相对定位 relative 和固定定位 fixed 的结合；它主要用在对 scroll 事件的监听上；简单来说，在滑动过程中，某个元素距离其父元素的距离达到 sticky 粘性定位的要求时(比如 top：100px )；position:sticky 这时的效果相当于 fixed 定位，固定到适当位置。")]),e._v(" "),n("p",[e._v("用法像上面那样用即可，但是有使用条件：")]),e._v(" "),n("p",[e._v("1、父元素不能 overflow:hidden 或者 overflow:auto 属性。\n2、必须指定 top、bottom、left、right 4 个值之一，否则只会处于相对定位\n3、父元素的高度不能低于 sticky 元素的高度\n4、sticky 元素仅在其父元素内生效")]),e._v(" "),n("ul",[n("li",[n("strong",[e._v("8. eslint 报找不到文件和装饰器的错")])])]),e._v(" "),n("p",[e._v("App.vue 中只是写了引用文件而已，而且 webpack 和 tsconfig.josn 里面已经配置了别名了的。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('import Nav from "@/components/nav.vue"; // @ is an alias to /src\nimport Slider from "@/components/slider.vue"; // @ is an alias to /src\nimport Footer from "@/components/footer.vue"; // @ is an alias to /src\nimport ArrowUp from "@/components/arrowUp.vue"; // @ is an alias to /src\nimport { isMobileOrPc } from "@/utils/utils";\n')])])]),n("p",[e._v("但是，还是会报如下的错：")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/12890819-442426b7910d103e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:""}})]),e._v(" "),n("p",[e._v("只是代码不影响文件的打包，而且本地与生产环境的代码也正常，没报错而已。")]),e._v(" "),n("p",[e._v("这个 eslint 的检测目前还没找到相关的配置可以把这些错误去掉。")]),e._v(" "),n("ul",[n("li",[n("strong",[e._v("9. 路由模式修改为 history")])])]),e._v(" "),n("p",[e._v("因为文章详情页面有目录，点击目录时定位定相应的内容，但是这个目录定位内容是根据锚点来做的，如果路由模式为 hash 模式的话，本来文章详情页面的路由就是 #articleDetail 了，再点击目录的话（比如 #title2 ），会在 #articleDetail 后面再加上 #title2，一刷新会找不到这个页面的。")]),e._v(" "),n("h2",{attrs:{id:"_10-build-setup"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10-build-setup"}},[e._v("#")]),e._v(" 10. Build Setup")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(" # clone\ngit clone https://github.com/biaochenxuying/blog-vue-typescript.git\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("# cd\ncd  blog-vue-typescript\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("# install dependencies\nnpm install\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("# Compiles and hot-reloads for development\nnpm run serve\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("# Compiles and minifies for production\nnpm run build\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("### Run your tests\nnpm run test\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("### Lints and fixes files\nnpm run lint\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("### Run your unit tests\nnpm run test:unit\n")])])]),n("ul",[n("li",[e._v("Customize configuration\nSee "),n("a",{attrs:{href:"https://cli.vuejs.org/config/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Configuration Reference"),n("OutboundLink")],1),e._v(".")])]),e._v(" "),n("p",[e._v("如果要看有后台数据完整的效果，是要和后台项目 "),n("strong",[n("a",{attrs:{href:"https://github.com/biaochenxuying/blog-node",target:"_blank",rel:"noopener noreferrer"}},[e._v("blog-node"),n("OutboundLink")],1)]),e._v(" 一起运行才行的，不然接口请求会失败。")]),e._v(" "),n("p",[e._v("虽然引入了 mock 了，但是还没有时间做模拟数据，想看具体效果，请稳步到我的网站上查看 "),n("a",{attrs:{href:"https://biaochenxuying.cn",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://biaochenxuying.cn"),n("OutboundLink")],1)]),e._v(" "),n("h2",{attrs:{id:"_11-项目地址与系列相关文章"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_11-项目地址与系列相关文章"}},[e._v("#")]),e._v(" 11. 项目地址与系列相关文章")]),e._v(" "),n("p",[e._v("基于 Vue + TypeScript + Element 的 "),n("a",{attrs:{href:"https://github.com/biaochenxuying/blog-vue-typescript",target:"_blank",rel:"noopener noreferrer"}},[e._v(" blog-vue-typescript 前台展示: https://github.com/biaochenxuying/blog-vue-typescript"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("基于 react + node + express + ant + mongodb 的博客前台，这个是笔者之前做的，效果和这个类似，地址如下：\n"),n("a",{attrs:{href:"https://github.com/biaochenxuying/blog-react",target:"_blank",rel:"noopener noreferrer"}},[e._v(" blog-react 前台展示: https://github.com/biaochenxuying/blog-react"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("em",[e._v("推荐阅读 :")])]),e._v(" "),n("p",[n("strong",[e._v("本博客系统的系列文章：")])]),e._v(" "),n("ul",[n("li",[n("ol",[n("li",[n("a",{attrs:{href:"https://github.com/GolderBrother/blog-vue-typescript",target:"_blank",rel:"noopener noreferrer"}},[e._v("vue 前台展示"),n("OutboundLink")],1)])])]),e._v(" "),n("li",[n("ol",{attrs:{start:"2"}},[n("li",[n("a",{attrs:{href:"https://github.com/GolderBrother/blog-react",target:"_blank",rel:"noopener noreferrer"}},[e._v("react 前台展示"),n("OutboundLink")],1)])])]),e._v(" "),n("li",[n("ol",{attrs:{start:"3"}},[n("li",[n("a",{attrs:{href:"https://github.com/GolderBrother/blog-react-admin",target:"_blank",rel:"noopener noreferrer"}},[e._v("管理后台"),n("OutboundLink")],1)])])]),e._v(" "),n("li",[n("ol",{attrs:{start:"4"}},[n("li",[n("a",{attrs:{href:"https://github.com/GolderBrother/blog-node-egg",target:"_blank",rel:"noopener noreferrer"}},[e._v("后端"),n("OutboundLink")],1)])])]),e._v(" "),n("li",[n("ol",{attrs:{start:"5"}},[n("li",[n("a",{attrs:{href:"http://golderbrother.cn/articleDetail?article_id=5cf9393bb1911633f44b374a",target:"_blank",rel:"noopener noreferrer"}},[e._v("一次网站的性能优化之路 -- 天下武功，唯快不破"),n("OutboundLink")],1)])])])]),e._v(" "),n("h2",{attrs:{id:"_12-最后"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_12-最后"}},[e._v("#")]),e._v(" 12. 最后")]),e._v(" "),n("p",[e._v("笔者也是初学 TS ，如果文章有错的地方，请指出，感谢。")]),e._v(" "),n("p",[e._v("一开始用 Vue + TS 来搭建时，我也是挺抵触的，因为踩了好多坑，而且很多类型检查方面也挺烦人。后面解决了，明白原理之后，是越用越爽，哈哈。")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/12890819-a8fd0a50f25a993e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:""}})]),e._v(" "),n("h4",{attrs:{id:"权衡"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#权衡"}},[e._v("#")]),e._v(" 权衡")]),e._v(" "),n("p",[e._v("如何更好的利用 JS 的动态性和 TS 的静态特质，我们需要结合项目的实际情况来进行综合判断。一些建议：")]),e._v(" "),n("ul",[n("li",[e._v("如果是中小型项目，且生命周期不是很长，那就直接用 JS 吧，不要被 TS 束缚住了手脚。")]),e._v(" "),n("li",[e._v("如果是大型应用，且生命周期比较长，那建议试试 TS。")]),e._v(" "),n("li",[e._v("如果是框架、库之类的公共模块，那更建议用 TS 了。")])]),e._v(" "),n("p",[n("strong",[e._v("至于到底用不用 TS，还是要看实际项目规模、项目生命周期、团队规模、团队成员情况等实际情况综合考虑。")])]),e._v(" "),n("p",[e._v("其实本项目也是小项目来的，其实并不太适合加入 TypeScript ，不过这个项目是个人的项目，是为了练手用的，所以就无伤大大雅。")]),e._v(" "),n("p",[e._v("未来，class-compoent 也将成为主流，现在写 TypeScript 以后进行 3.0 的迁移会更加方便。")]),e._v(" "),n("p",[e._v("每天下班后，用几个晚上的时间来写这篇文章，码字不易，如果您觉得这篇文章不错或者对你有所帮助，"),n("strong",[e._v("请给个赞或者星吧，你的点赞就是我继续创作的最大动力。")])]),e._v(" "),n("h2",{attrs:{id:"参考文章"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[e._v("#")]),e._v(" 参考文章:")]),e._v(" "),n("ol",[n("li",[n("p",[n("a",{attrs:{href:"https://segmentfault.com/a/1190000011744210",target:"_blank",rel:"noopener noreferrer"}},[e._v("vue + typescript 项目起手式"),n("OutboundLink")],1)])]),e._v(" "),n("li",[n("p",[n("a",{attrs:{href:"https://www.imooc.com/article/47096",target:"_blank",rel:"noopener noreferrer"}},[e._v("TypeScript + 大型项目实战"),n("OutboundLink")],1)])]),e._v(" "),n("li",[n("p",[n("a",{attrs:{href:"https://www.jianshu.com/p/6c064270691f",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vue 全家桶+TypeScript 使用总结"),n("OutboundLink")],1)])])]),e._v(" "),n("h2",{attrs:{id:"最后"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#最后"}},[e._v("#")]),e._v(" 最后")]),e._v(" "),n("p",[e._v("文中若有不准确或错误的地方，欢迎指出，有兴趣可以的关注下"),n("a",{attrs:{href:"https://github.com/GolderBrother",target:"_blank",rel:"noopener noreferrer"}},[e._v("Github"),n("OutboundLink")],1),e._v("~")])])}),[],!1,null,null,null);t.default=s.exports}}]);