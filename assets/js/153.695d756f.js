(window.webpackJsonp=window.webpackJsonp||[]).push([[153],{586:function(t,a,s){"use strict";s.r(a);var e=s(1),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"谈谈-web-安全问题及解决方案"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#谈谈-web-安全问题及解决方案"}},[t._v("#")]),t._v(" 谈谈 web 安全问题及解决方案")]),t._v(" "),s("h2",{attrs:{id:"目录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#目录"}},[t._v("#")]),t._v(" 目录")]),t._v(" "),s("p",[t._v("本文简单介绍几种常见的 web 安全问题：")]),t._v(" "),s("ul",[s("li",[t._v("同源策略")]),t._v(" "),s("li",[t._v("XSS")]),t._v(" "),s("li",[t._v("CSRF")]),t._v(" "),s("li",[t._v("SQL 注入")]),t._v(" "),s("li",[t._v("点击劫持")]),t._v(" "),s("li",[t._v("window.opener 安全问题")]),t._v(" "),s("li",[t._v("文件上传漏洞")])]),t._v(" "),s("h2",{attrs:{id:"同源策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#同源策略"}},[t._v("#")]),t._v(" 同源策略")]),t._v(" "),s("p",[t._v("如果两个 URL 的"),s("strong",[t._v("协议")]),t._v("、"),s("strong",[t._v("域名")]),t._v("和"),s("strong",[t._v("端口")]),t._v("都相同，我们就称这两个 URL 同源。")]),t._v(" "),s("ul",[s("li",[t._v("同源策略限制了来自不同源的 "),s("strong",[t._v("JavaScript")]),t._v(" 脚本对当前 DOM 对象读和写的操作。")]),t._v(" "),s("li",[t._v("同源策略限制了不同源的站点读取当前站点的 "),s("strong",[t._v("Cookie、IndexDB、LocalStorage")]),t._v(" 等数据。")]),t._v(" "),s("li",[t._v("同源策略限制了通过 "),s("strong",[t._v("XMLHttpRequest")]),t._v(" 等方式将站点的数据发送给不同源的站点。")])]),t._v(" "),s("h3",{attrs:{id:"解决同源策略的方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解决同源策略的方法"}},[t._v("#")]),t._v(" 解决同源策略的方法")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("跨文档消息机制")]),t._v(":可以通过 "),s("strong",[t._v("window.postMessage")]),t._v(" 的 "),s("strong",[t._v("JavaScript")]),t._v(" 接口来和不同源的 DOM 进行通信。")]),t._v(" "),s("li",[s("strong",[t._v("跨域资源共享（CORS）")]),t._v(":跨域资源在服务端设置允许跨域，就可以进行跨域访问控制，从而使跨域数据传输得以安全进行。")]),t._v(" "),s("li",[s("strong",[t._v("内容安全策略（CSP - Content Security Policy）")]),t._v(":主要以白名单的形式配置可信任的内容来源，在网页中，能够使白名单中的内容正常执行（包含 JS，CSS，Image 等等），而非白名单的内容无法正常执行。")])]),t._v(" "),s("h2",{attrs:{id:"xss，跨站脚本攻击-cross-site-scripting"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#xss，跨站脚本攻击-cross-site-scripting"}},[t._v("#")]),t._v(" XSS，跨站脚本攻击(Cross Site Scripting)")]),t._v(" "),s("h3",{attrs:{id:"存储型-xss-攻击"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#存储型-xss-攻击"}},[t._v("#")]),t._v(" 存储型 XSS 攻击")]),t._v(" "),s("p",[t._v("利用漏洞提交恶意 JavaScript 代码，比如在 input, textarea 等所有可能输入文本信息的区域，输入"),s("code",[t._v('<script src="http://恶意网站"><\/script>')]),t._v("等，提交后信息会存在服务器中，当用户再次打开网站请求到相应的数据，打开页面，恶意脚本就会将用户的 Cookie 信息等数据上传到黑客服务器。")]),t._v(" "),s("h3",{attrs:{id:"反射型-xss-攻击"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#反射型-xss-攻击"}},[t._v("#")]),t._v(" 反射型 XSS 攻击")]),t._v(" "),s("p",[t._v("用户将一段含有恶意代码的请求提交给 Web 服务器，Web 服务器接收到请求时，又将恶意代码反射给了浏览器端，这就是反射型 XSS 攻击。\n在现实生活中，黑客经常会通过 QQ 群或者邮件等渠道诱导用户去点击这些恶意链接，所以对于一些链接我们一定要慎之又慎。")]),t._v(" "),s("p",[t._v("Web 服务器不会存储反射型 XSS 攻击的恶意脚本，这是和存储型 XSS 攻击不同的地方。")]),t._v(" "),s("h3",{attrs:{id:"基于-dom-的-xss-攻击"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基于-dom-的-xss-攻击"}},[t._v("#")]),t._v(" 基于 DOM 的 XSS 攻击")]),t._v(" "),s("p",[t._v("基于 DOM 的 XSS 攻击是不牵涉到页面 Web 服务器的。它的特点是在 Web 资源传输过程或者在用户使用页面的过程中修改 Web 页面的数据。比如利用工具(如 Burpsuite)扫描目标网站所有的网页并自动测试写好的注入脚本等。")]),t._v(" "),s("p",[t._v("预防策略：")]),t._v(" "),s("ol",[s("li",[t._v("将 cookie 等敏感信息设置为 httponly，禁止 Javascript 通过 document.cookie 获得")]),t._v(" "),s("li",[t._v("对所有的输入做严格的校验尤其是在服务器端，过滤掉任何不合法的输入，比如手机号必须是数字，通常可以采用正则表达式.")]),t._v(" "),s("li",[t._v("净化和过滤掉不必要的 html 标签，比如："),s("code",[t._v("<iframe>, alt,<script>")]),t._v(" ;净化和过滤掉不必要的 Javascript 的事件标签，比如："),s("code",[t._v("onclick, onfocus")]),t._v("等")]),t._v(" "),s("li",[t._v("转义单引号，双引号，尖括号等特殊字符，可以采用 htmlencode 编码 或者过滤掉这些特殊字符")]),t._v(" "),s("li",[t._v("CSP,CSP 全称为 Content Security Policy，即内容安全策略。主要以白名单的形式配置可信任的内容来源，在网页中，能够使白名单中的内容正常执行（包含 JS，CSS，Image 等等），而非白名单的内容无法正常执行，从而减少跨站脚本攻击（XSS），当然，也能够减少运营商劫持的内容注入攻击。")])]),t._v(" "),s("p",[t._v("配置方式：")]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[t._v("//1、meta\n\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("meta")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("http-equiv")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("Content-Security-Policy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("content")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("script-src 'self'"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n\n//2、Http 头部 Content-Security-Policy: script-src 'unsafe-inline' 'unsafe-eval' 'self' *.54php.cn\n*.yunetidc.com *.baidu.com *.cnzz.com *.duoshuo.com *.jiathis.com;report-uri /error/csp\n")])])]),s("h2",{attrs:{id:"csrf-跨站请求伪造（cross-site-request-forgery）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#csrf-跨站请求伪造（cross-site-request-forgery）"}},[t._v("#")]),t._v(" CSRF,跨站请求伪造（Cross-site request forgery）")]),t._v(" "),s("p",[t._v("引诱用户打开黑客的网站，在黑客的网站中，利用用户的登录状态发起的跨站请求。")]),t._v(" "),s("h3",{attrs:{id:"发起-csrf-攻击的三个必要条件："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#发起-csrf-攻击的三个必要条件："}},[t._v("#")]),t._v(" 发起 CSRF 攻击的三个必要条件：")]),t._v(" "),s("ol",[s("li",[t._v("目标站点一定要有 CSRF 漏洞；")]),t._v(" "),s("li",[t._v("用户要登录过目标站点，并且在浏览器上保持有该站点的登录状态；")]),t._v(" "),s("li",[t._v("需要用户打开一个第三方站点，如黑客的站点等。")])]),t._v(" "),s("h3",{attrs:{id:"预防策略："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#预防策略："}},[t._v("#")]),t._v(" 预防策略：")]),t._v(" "),s("h4",{attrs:{id:"_1-充分利用好-cookie-的-samesite-属性。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-充分利用好-cookie-的-samesite-属性。"}},[t._v("#")]),t._v(" 1. 充分利用好 Cookie 的 SameSite 属性。")]),t._v(" "),s("p",[t._v("SameSite 选项通常有 Strict、Lax 和 None 三个值。")]),t._v(" "),s("ul",[s("li",[t._v("SameSite 的值是 Strict，那么浏览器会完全禁止第三方 Cookie。")]),t._v(" "),s("li",[t._v("Lax 相对宽松一点。在跨站点的情况下，从第三方站点的链接打开和从第三方站点提交 Get 方式的表单这两种方式都会携带 Cookie。但如果在第三方站点中使用 Post 方法，或者通过 img、iframe 等标签加载的 URL，这些场景都不会携带 Cookie。")]),t._v(" "),s("li",[t._v("而如果使用 None 的话，在任何情况下都会发送 Cookie 数据。\n如：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("set-cookie: 1P_JAR=2019-10-20-06; expires=Tue, 19-Nov-2019 06:36:21 GMT; path=/; domain=.google.com; SameSite=none\n")])])]),s("h4",{attrs:{id:"_2-验证请求的来源站点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-验证请求的来源站点"}},[t._v("#")]),t._v(" 2. 验证请求的来源站点")]),t._v(" "),s("p",[t._v("在服务器端验证请求来源的站点，就是验证 HTTP 请求头中的 Origin 和 Referer 属性。Referer 是 HTTP 请求头中的一个字段，记录了该 HTTP 请求的来源地址，而 O rigin 属性只包含了域名信息，并没有包含具体的 URL 路径。这是 Origin 和 Referer 的一个主要区别。")]),t._v(" "),s("p",[t._v("服务器的策略是优先判断 Origin，如果请求头中没有包含 Origin 属性，再根据实际情况判断是否使用 Referer 值。")]),t._v(" "),s("h4",{attrs:{id:"_3-在请求地址中添加-token-并验证"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-在请求地址中添加-token-并验证"}},[t._v("#")]),t._v(" 3. 在请求地址中添加 token 并验证")]),t._v(" "),s("p",[t._v("CSRF 攻击之所以能够成功，是因为黑客可以完全伪造用户的请求，该请求中所有的用户验证信息都是存在于 cookie 中，因此黑客可以在不知道这些验证信息的情况下直接利用用户自己的 cookie 来通过安全验证。因此要抵御 CSRF，关键在于在请求中放入黑客所不能伪造的信息，并且该信息不存在于 cookie 之中。可以在 HTTP 请求中以参数的形式加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，如果请求中没有 token 或者 token 内容不正确，则认为可能是 CSRF 攻击而拒绝该请求。")]),t._v(" "),s("h4",{attrs:{id:"_4-在-http-头中自定义属性并验证"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-在-http-头中自定义属性并验证"}},[t._v("#")]),t._v(" 4. 在 HTTP 头中自定义属性并验证")]),t._v(" "),s("p",[t._v("这种方法也是使用 token 并进行验证，和上一种方法不同的是，这里并不是把 token 以参数的形式置于 HTTP 请求之中，而是把它放到 HTTP 头中自定义的属性里。通过 XMLHttpRequest 这个类，可以一次性给所有该类请求加上 csrftoken 这个 HTTP 头属性，并把 token 值放入其中。这样解决了上种方法在请求中加入 token 的不便，同时，通过 XMLHttpRequest 请求的地址不会被记录到浏览器的地址栏，也不用担心 token 会透过 Referer 泄露到其他网站中去。")]),t._v(" "),s("p",[t._v("然而这种方法的局限性非常大。XMLHttpRequest 请求通常用于 Ajax 方法中对于页面局部的异步刷新，并非所有的请求都适合用这个类来发起，而且通过该类请求得到的页面不能被浏览器所记录下，从而进行前进，后退，刷新，收藏等操作，给用户带来不便。另外，对于没有进行 CSRF 防护的遗留系统来说，要采用这种方法来进行防护，要把所有请求都改为 XMLHttpRequest 请求，这样几乎是要重写整个网站，这代价无疑是不能接受的。")]),t._v(" "),s("h2",{attrs:{id:"sql-注入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sql-注入"}},[t._v("#")]),t._v(" SQL 注入")]),t._v(" "),s("p",[t._v("拼接 SQL 时未仔细过滤，黑客可提交畸形数据改变语义。比如查某个文章，提交了这样的数据 id=-1 or 1=1 等。1=1 永远是 true，导致 where 语句永远是 ture.那么查询的结果相当于整张表的内容，攻击者就达到了目的。或者，通过屏幕上的报错提示推测 SQL 语句等。")]),t._v(" "),s("p",[t._v("预防策略：")]),t._v(" "),s("ol",[s("li",[t._v("禁止目标网站利用动态拼接字符串的方式访问数据库")]),t._v(" "),s("li",[t._v("减少不必要的数据库抛出的错误信息")]),t._v(" "),s("li",[t._v("对数据库的操作赋予严格的权限控制")]),t._v(" "),s("li",[t._v("净化和过滤掉不必要的 SQL 保留字，比如：where, or, exec 等")])]),t._v(" "),s("h2",{attrs:{id:"点击劫持"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#点击劫持"}},[t._v("#")]),t._v(" 点击劫持")]),t._v(" "),s("ul",[s("li",[t._v("诱使用户点击看似无害的按钮（实则点击了透明 iframe 中的按钮）.")]),t._v(" "),s("li",[t._v("监听鼠标移动事件，让危险按钮始终在鼠标下方.")]),t._v(" "),s("li",[t._v("使用 HTML5 拖拽技术执行敏感操作（例如 deploy key）.")])]),t._v(" "),s("p",[t._v("预防策略：")]),t._v(" "),s("ol",[s("li",[t._v("服务端添加 X-Frame-Options 响应头,这个 HTTP 响应头是为了防御用 iframe 嵌套的点击劫持攻击。 这样浏览器就会阻止嵌入网页的渲染。")]),t._v(" "),s("li",[t._v("JS 判断顶层视口的域名是不是和本页面的域名一致，不一致则不允许操作，top.location.hostname === self.location.hostname；")]),t._v(" "),s("li",[t._v("敏感操作使用更复杂的步骤（验证码、输入项目名称以删除）。")])]),t._v(" "),s("h2",{attrs:{id:"window-opener-安全问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#window-opener-安全问题"}},[t._v("#")]),t._v(" window.opener 安全问题")]),t._v(" "),s("p",[t._v('window.opener 表示打开当前窗体页面的的父窗体的是谁。例如，在 A 页面中，通过一个带有 target="_blank" 的 a 标签打开了一个新的页面 B，那么在 B 页面里，window.opener 的值为 A 页面的 window 对象。')]),t._v(" "),s("p",[t._v("一般来说，打开同源(域名相同)的页面，不会有什么问题。但对于跨域的外部链接来说，存在一个被钓鱼的风险。比如你正在浏览购物网站，从当前网页打开了某个外部链接，在打开的外部页面，可以通过 window.opener.location 改写来源站点的地址。利用这一点，将来源站点改写到钓鱼站点页面上，例如跳转到伪造的高仿购物页面，当再回到购物页面的时候，是很难发现购物网站的地址已经被修改了的，这个时候你的账号就存在被钓鱼的可能了。")]),t._v(" "),s("p",[t._v("预防策略：")]),t._v(" "),s("pre",[s("code",[t._v("1. 设置 rel 属性\n")])]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("a")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("href")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("https://xxxx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("rel")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("noopener noreferrer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" 外链 "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("a")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("a")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("a")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("pre",[s("code",[t._v("rel=noopener 规定禁止新页面传递源页面的地址，通过设置了此属性的链接打开的页面，其 window.opener 的值为 null。\n\n2. 将外链替换为内部的跳转连接服务，跳转时先跳到内部地址，再由服务器 redirect 到外链。\n\n3. 可以由 widow.open 打开外链。\n")])]),t._v(" "),s("h2",{attrs:{id:"文件上传漏洞"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#文件上传漏洞"}},[t._v("#")]),t._v(" 文件上传漏洞")]),t._v(" "),s("p",[t._v("服务器未校验上传的文件，致使黑客可以上传恶意脚本等方式。")]),t._v(" "),s("p",[t._v("预防策略：")]),t._v(" "),s("pre",[s("code",[t._v("1. 用文件头来检测文件类型，使用白名单过滤(有些文件可以从其中一部分执行，只检查文件头无效，例如 PHP 等脚本语言)；\n2. 上传后将文件彻底重命名并移动到不可执行的目录下；\n3. 升级服务器软件以避免路径解析漏洞；\n4. 升级用到的开源编辑器；\n5. 管理后台设置强密码。\n")])]),t._v(" "),s("h2",{attrs:{id:"参考资料"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),s("ul",[s("li",[t._v("极客时间《浏览器工作原理与实践》")])]),t._v(" "),s("h2",{attrs:{id:"最后"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最后"}},[t._v("#")]),t._v(" 最后")]),t._v(" "),s("p",[t._v("文中若有不准确或错误的地方，欢迎指出，有兴趣可以的关注下"),s("a",{attrs:{href:"https://github.com/GolderBrother",target:"_blank",rel:"noopener noreferrer"}},[t._v("Github"),s("OutboundLink")],1),t._v("，一起学习呀~~")]),t._v(" "),s("comment")],1)}),[],!1,null,null,null);a.default=r.exports}}]);