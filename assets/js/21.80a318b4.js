(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{381:function(t,s,a){t.exports=a.p+"assets/img/http3-1.9dd45930.png"},382:function(t,s,a){t.exports=a.p+"assets/img/http3-2.1f41f7e1.png"},383:function(t,s,a){t.exports=a.p+"assets/img/http3-3.6bd0e234.png"},603:function(t,s,a){"use strict";a.r(s);var e=a(1),_=Object(e.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"http-灵魂之问，巩固你的-http-知识体系"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-灵魂之问，巩固你的-http-知识体系"}},[t._v("#")]),t._v(" HTTP 灵魂之问，巩固你的 HTTP 知识体系")]),t._v(" "),e("p",[t._v("为了帮助大家树立完整的 HTTP 知识体系，并达到一定的深度，从容地应对各种灵魂之问，也同时提升自己作为一个 web 开发的专业素养吧。这是本文的思维导图")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/3/23/17104ea1fdee5669?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),t._v(" "),e("h2",{attrs:{id:"_001-http-报文结构是怎样的？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_001-http-报文结构是怎样的？"}},[t._v("#")]),t._v(" 001. HTTP 报文结构是怎样的？")]),t._v(" "),e("p",[t._v("对于 "),e("strong",[t._v("TCP")]),t._v(" 而言，在传输的时候分为两个部分:"),e("strong",[t._v("TCP 头")]),t._v("和"),e("strong",[t._v("数据部分")]),t._v("。")]),t._v(" "),e("p",[t._v("而 "),e("strong",[t._v("HTTP")]),t._v(" 类似，也是"),e("code",[t._v("header + body")]),t._v("的结构，具体而言:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("起始行 + 头部 + 空行 + 实体\n")])])]),e("p",[t._v("由于 http "),e("strong",[t._v("请求报文")]),t._v("和"),e("strong",[t._v("响应报文")]),t._v("是有一定区别，因此我们分开介绍。")]),t._v(" "),e("h3",{attrs:{id:"起始行"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#起始行"}},[t._v("#")]),t._v(" 起始行")]),t._v(" "),e("p",[t._v("对于请求报文来说，起始行类似下面这样:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("GET")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("home "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTTP")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.1")]),t._v("\n")])])]),e("p",[t._v("也就是"),e("strong",[t._v("方法 + 路径 + http 版本")]),t._v("。")]),t._v(" "),e("p",[t._v("对于响应报文来说，起始行一般长这个样:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTTP")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.1")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("OK")]),t._v("\n")])])]),e("p",[t._v("响应报文的起始行也叫做"),e("strong",[t._v("状态行")]),t._v("。由"),e("strong",[t._v("http 协议版本、状态码和描述")]),t._v("三部分组成。\n其中协议版本"),e("code",[t._v("HTTP/1.1")]),t._v("或者"),e("code",[t._v("HTTP/1.0")]),t._v("，"),e("code",[t._v("200")]),t._v("就是它的"),e("strong",[t._v("状态码")]),t._v("，"),e("code",[t._v("OK")]),t._v("则为它的"),e("strong",[t._v("描述")]),t._v("。")]),t._v(" "),e("p",[t._v("值得注意的是，在起始行中，每两个部分之间用"),e("strong",[t._v("空格")]),t._v("隔开，最后一个部分后面应该接一个"),e("strong",[t._v("换行")]),t._v("，严格遵循"),e("code",[t._v("ABNF")]),t._v("语法规范。")]),t._v(" "),e("h3",{attrs:{id:"头部"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#头部"}},[t._v("#")]),t._v(" 头部")]),t._v(" "),e("p",[t._v("展示一下请求头和响应头在报文中的位置:")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/3/22/170ffd6012e2fc88?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),t._v(" "),e("p",[t._v("不管是请求头还是响应头，其中的字段是相当多的，而且牵扯到"),e("code",[t._v("http")]),t._v("非常多的特性，这里就不一一列举的，重点看看这些头部字段的格式：")]),t._v(" "),e("ul",[e("li",[t._v("字段名不区分大小写")]),t._v(" "),e("li",[t._v("字段名不允许出现"),e("strong",[t._v("空格")]),t._v("，不可以出现下划线"),e("code",[t._v("_")])]),t._v(" "),e("li",[t._v("字段名后面必须紧接着"),e("code",[t._v(":")])])]),t._v(" "),e("h3",{attrs:{id:"空行"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#空行"}},[t._v("#")]),t._v(" 空行")]),t._v(" "),e("p",[t._v("很重要，用来区分开"),e("strong",[t._v("头部")]),t._v("和"),e("strong",[t._v("实体")]),t._v("。")]),t._v(" "),e("p",[t._v("问: 如果说在头部中间故意加一个空行会怎么样？")]),t._v(" "),e("p",[t._v("那么空行后的内容全部被视为"),e("strong",[t._v("实体")]),t._v("。")]),t._v(" "),e("h3",{attrs:{id:"实体"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实体"}},[t._v("#")]),t._v(" 实体")]),t._v(" "),e("p",[t._v("就是具体的数据了，也就是"),e("code",[t._v("body")]),t._v("部分。请求报文对应"),e("strong",[t._v("请求体")]),t._v(", 响应报文对应"),e("strong",[t._v("响应体")]),t._v("。")]),t._v(" "),e("h2",{attrs:{id:"_002-如何理解-http-的请求方法？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_002-如何理解-http-的请求方法？"}},[t._v("#")]),t._v(" 002. 如何理解 HTTP 的请求方法？")]),t._v(" "),e("h3",{attrs:{id:"有哪些请求方法？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#有哪些请求方法？"}},[t._v("#")]),t._v(" 有哪些请求方法？")]),t._v(" "),e("p",[e("code",[t._v("http/1.1")]),t._v("规定了以下请求方法(注意，都是"),e("strong",[t._v("大写")]),t._v("):")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("GET")]),t._v(": 通常用来获取资源")]),t._v(" "),e("li",[e("code",[t._v("HEAD")]),t._v(": 获取资源的元信息")]),t._v(" "),e("li",[e("code",[t._v("POST")]),t._v(": 提交数据，即上传数据")]),t._v(" "),e("li",[e("code",[t._v("PUT")]),t._v(": 修改数据")]),t._v(" "),e("li",[e("code",[t._v("DELETE")]),t._v(": 删除资源(几乎用不到)")]),t._v(" "),e("li",[e("code",[t._v("CONNECT")]),t._v(": 建立连接隧道，用于代理服务器")]),t._v(" "),e("li",[e("code",[t._v("OPTIONS")]),t._v(": 列出可对资源实行的请求方法，用于客户端试探服务端是否能接受真正的请求")]),t._v(" "),e("li",[e("code",[t._v("TRACE")]),t._v(": 追踪请求-响应的传输路径")]),t._v(" "),e("li",[e("code",[t._v("PATCH")]),t._v(": 是对 PUT 方法的补充，用来对已知资源进行局部更新 。")])]),t._v(" "),e("h3",{attrs:{id:"get-和-post-有什么区别？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#get-和-post-有什么区别？"}},[t._v("#")]),t._v(" GET 和 POST 有什么区别？")]),t._v(" "),e("p",[t._v("首先最直观的是"),e("strong",[t._v("语义")]),t._v("上的区别。")]),t._v(" "),e("p",[t._v("而后又有这样一些具体的差别:")]),t._v(" "),e("ul",[e("li",[t._v("从"),e("strong",[t._v("缓存")]),t._v("的角度:\n"),e("ul",[e("li",[t._v("GET 请求会被浏览器主动缓存下来，留下历史记录，而 "),e("code",[t._v("POST")]),t._v(" 默认不会。")]),t._v(" "),e("li",[t._v("GET 请求参数会被保留在浏览器历史记录里，而 POST 中的参数不会被保留。")])])]),t._v(" "),e("li",[t._v("从"),e("strong",[t._v("编码")]),t._v("的角度，GET 只能进行 "),e("code",[t._v("URL")]),t._v(" 编码，只能接收 "),e("code",[t._v("ASCII")]),t._v(" 字符，而 "),e("code",[t._v("POST")]),t._v(" 没有限制, 支持多种编码方式。")]),t._v(" "),e("li",[t._v("从"),e("strong",[t._v("参数")]),t._v("的角度\n"),e("ul",[e("li",[t._v("GET 一般放在 "),e("code",[t._v("URL")]),t._v(" 中，因此不安全，"),e("code",[t._v("POST")]),t._v(" 放在请求体中，更适合传输敏感信息。")]),t._v(" "),e("li",[t._v("GET 请求在"),e("code",[t._v("URL")]),t._v(" 中传送的参数是有长度限制的，而"),e("code",[t._v("POST")]),t._v("没有, 实际上是大部分浏览器都会限制"),e("code",[t._v("url")]),t._v("长度在"),e("code",[t._v("2K")]),t._v("个字节")])])]),t._v(" "),e("li",[t._v("从"),e("strong",[t._v("幂等性")]),t._v("的角度，GET 是幂等的，而"),e("code",[t._v("POST")]),t._v("不是。(幂等表示执行相同的操作，结果也是相同的)")]),t._v(" "),e("li",[t._v("从"),e("strong",[t._v("TCP")]),t._v("的角度，GET 请求会把请求报文一次性发出去，而 "),e("code",[t._v("POST")]),t._v(" 会分为两个 "),e("code",[t._v("TCP")]),t._v(" 数据包，首先发 header 部分，如果服务器响应 100(continue)， 然后发 "),e("code",[t._v("body")]),t._v(" 部分。(火狐浏览器除外，它的 POST 请求只发一个 "),e("code",[t._v("TCP")]),t._v(" 包)")])]),t._v(" "),e("h3",{attrs:{id:"_003-如何理解-uri？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_003-如何理解-uri？"}},[t._v("#")]),t._v(" 003: 如何理解 URI？")]),t._v(" "),e("p",[e("strong",[t._v("URI")]),t._v(", 全称为("),e("code",[t._v("Uniform Resource Identifier")]),t._v("), 也就是"),e("strong",[t._v("统一资源标识符")]),t._v("，它的作用很简单，就是区分"),e("strong",[t._v("互联网上不同的资源")]),t._v("。")]),t._v(" "),e("p",[t._v("但是，它并不是我们常说的网址, 网址指的是"),e("code",[t._v("URL")]),t._v(", 实际上"),e("code",[t._v("URI")]),t._v("包含了"),e("code",[t._v("URN")]),t._v("和"),e("code",[t._v("URL")]),t._v("两个部分，由于 "),e("code",[t._v("URL")]),t._v(" 过于普及，就默认将 "),e("code",[t._v("URI")]),t._v(" 视为 "),e("code",[t._v("URL")]),t._v(" 了。")]),t._v(" "),e("h4",{attrs:{id:"uri-的结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#uri-的结构"}},[t._v("#")]),t._v(" URI 的结构")]),t._v(" "),e("p",[t._v("URI 真正最完整的结构是这样的。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/3/22/170ffd677629b70d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),t._v(" "),e("p",[t._v("我们来一一拆解分析这个结构")]),t._v(" "),e("p",[e("code",[t._v("scheme")]),t._v(" 表示"),e("strong",[t._v("协议名")]),t._v("，比如"),e("code",[t._v("http, https, file, rtsp, rtmp")]),t._v("等等。后面必须和"),e("code",[t._v("://")]),t._v("连在一起。")]),t._v(" "),e("p",[e("code",[t._v("user:passwd@")]),t._v(" 表示登录主机时的"),e("strong",[t._v("用户信息")]),t._v("，不过很不安全，不推荐使用，也不常用。")]),t._v(" "),e("p",[e("code",[t._v("host:port")]),t._v("表示"),e("strong",[t._v("主机名")]),t._v("和"),e("strong",[t._v("端口")]),t._v("。")]),t._v(" "),e("p",[e("code",[t._v("path")]),t._v("表示"),e("strong",[t._v("请求路径")]),t._v("，标记资源所在位置。")]),t._v(" "),e("p",[e("code",[t._v("query")]),t._v("表示"),e("strong",[t._v("查询参数")]),t._v("，为 "),e("code",[t._v("key=val")]),t._v(" 这种形式，多个键值对之间用"),e("code",[t._v("&")]),t._v("隔开。比如 "),e("code",[t._v("wd=http&rsv_spt=1&rsv_iqid=0xe4c8526f0004bf6d&issp=1&f=8&rsv_bp=1&rsv_idx=2")])]),t._v(" "),e("p",[e("code",[t._v("fragment")]),t._v("表示 "),e("code",[t._v("URI")]),t._v(" 所定位的资源内的一个"),e("strong",[t._v("锚点")]),t._v("，浏览器可以根据这个"),e("strong",[t._v("锚点")]),t._v("跳转到对应的位置。")]),t._v(" "),e("p",[t._v("举个栗子:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("https"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("www"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("baidu"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("s"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("wd"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("http"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rsv_spt"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rsv_iqid"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0xe4c8526f0004bf6d")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("issp"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("f"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rsv_bp"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rsv_idx"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n")])])]),e("p",[t._v("上面这个 "),e("code",[t._v("URI")]),t._v(" 中，"),e("code",[t._v("https")]),t._v("即"),e("code",[t._v("scheme")]),t._v("("),e("strong",[t._v("协议")]),t._v(")部分，"),e("code",[t._v("www.baidu.com")]),t._v("为"),e("code",[t._v("host:port")]),t._v("("),e("strong",[t._v("主机名:端口")]),t._v(")部分（注意，"),e("code",[t._v("http")]),t._v(" 和 "),e("code",[t._v("https")]),t._v(" 的默认端口分别为"),e("code",[t._v("80、443")]),t._v("），"),e("code",[t._v("/s")]),t._v("为"),e("code",[t._v("path")]),t._v("("),e("strong",[t._v("请求路径")]),t._v(")部分，而"),e("code",[t._v("wd=http&rsv_spt=1&rsv_iqid=0xe4c8526f0004bf6d&issp=1&f=8&rsv_bp=1&rsv_idx=2")]),t._v("就是"),e("code",[t._v("query")]),t._v("("),e("strong",[t._v("查询参数")]),t._v(")部分。")]),t._v(" "),e("h3",{attrs:{id:"uri-编码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#uri-编码"}},[t._v("#")]),t._v(" URI 编码")]),t._v(" "),e("p",[e("code",[t._v("URI")]),t._v(" 只能使用"),e("code",[t._v("ASCII")]),t._v(", "),e("code",[t._v("ASCII")]),t._v(" 之外的字符是不支持显示的，而且还有一部分符号是"),e("strong",[t._v("界定符")]),t._v("，如果不加以处理就会导致解析出错。")]),t._v(" "),e("p",[t._v("因此，"),e("code",[t._v("URI")]),t._v(" 引入了"),e("strong",[t._v("编码")]),t._v("机制，将所有非 "),e("code",[t._v("ASCII")]),t._v(" 码字符和"),e("strong",[t._v("界定符")]),t._v("转为"),e("strong",[t._v("十六进制字节值")]),t._v("，然后在前面加个"),e("code",[t._v("%")]),t._v("。")]),t._v(" "),e("p",[t._v("如，"),e("strong",[t._v("空格")]),t._v("被转义成了"),e("code",[t._v("%20")]),t._v("，"),e("strong",[t._v("神哥")]),t._v("被转义成了"),e("code",[t._v("%E7%A5%9E%E5%93%A5")]),t._v("。")]),t._v(" "),e("p",[t._v("可以直接使用"),e("code",[t._v("encodeURI")]),t._v("或者"),e("code",[t._v("encodeURIComponent")]),t._v("方法对"),e("strong",[t._v("整个 URI")]),t._v("或者"),e("strong",[t._v("URI 中的某一段")]),t._v("进行"),e("strong",[t._v("编码")])]),t._v(" "),e("p",[t._v("我们来看下面的栗子：")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" uri "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'https://www.baidu.com/s?wd=http&rsv_spt=1&rsv_iqid=0xdca1d90b00033d32 '")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("encodeURI")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("uri"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// https://www.baidu.com/s?wd=http&rsv_spt=1&rsv_iqid=0xdca1d90b00033d32%20")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("encodeURIComponent")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("uri"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// https%3A%2F%2Fwww.baidu.com%2Fs%3Fwd%3Dhttp%26rsv_spt%3D1%26rsv_iqid%3D0xdca1d90b00033d32%20")]),t._v("\n")])])]),e("p",[e("code",[t._v("encodeURI")]),t._v("和"),e("code",[t._v("encodeURIComponent")]),t._v("的区别")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("encodeURI()")]),t._v("不会对本身属于"),e("code",[t._v("URI")]),t._v("的特殊字符进行编码，例如"),e("code",[t._v("冒号、正斜杠、问号和井字号")]),t._v("；而"),e("code",[t._v("encodeURIComponent()")]),t._v("则会对它发现的"),e("strong",[t._v("任何非标准字符")]),t._v("进行编码")]),t._v(" "),e("li",[t._v("使用"),e("code",[t._v("encodeURI()")]),t._v("编码后的结果是"),e("strong",[t._v("除了空格之外的其他字符")]),t._v("都原封不动，只有空格被替换成了"),e("code",[t._v("%20")]),t._v("。而"),e("code",[t._v("encodeURIComponent()")]),t._v("方法则会使用对应的编码替换"),e("strong",[t._v("所有非字母数字字符")])])]),t._v(" "),e("p",[t._v("这也正是可以对整个"),e("code",[t._v("URI")]),t._v("使用"),e("code",[t._v("encodeURI()")]),t._v("，而只能对附加在现有 URI 后面的字符串使用"),e("code",[t._v("encodeURIComponent()")]),t._v("的原因所在。一般来说,我们使用"),e("code",[t._v("encodeURIComponent()")]),t._v("方法的时候要比使用"),e("code",[t._v("encodeURI()")]),t._v("更多,因为在实践中更常见的是对查询字符串参数而不是对基础 URL 进行编码.\n经我的观测，很多网站的"),e("code",[t._v("cookie")]),t._v("在进行编码的时候，是"),e("code",[t._v("encodeURIComponent")]),t._v("格式的，所以应该使用"),e("code",[t._v("decodeURIComponent")]),t._v("进行解码")]),t._v(" "),e("h2",{attrs:{id:"_004-如何理解-http-状态码？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_004-如何理解-http-状态码？"}},[t._v("#")]),t._v(" 004: 如何理解 HTTP 状态码？")]),t._v(" "),e("p",[e("code",[t._v("RFC")]),t._v(" 规定 "),e("code",[t._v("HTTP")]),t._v(" 的状态码为"),e("strong",[t._v("三位数")]),t._v("，被分为五类:")]),t._v(" "),e("ul",[e("li",[t._v("1xx: 表示目前是协议处理的"),e("strong",[t._v("中间状态")]),t._v("，还"),e("strong",[t._v("需要后续")]),t._v("操作。")]),t._v(" "),e("li",[t._v("2xx: 表示"),e("strong",[t._v("请求成功")]),t._v("状态。")]),t._v(" "),e("li",[t._v("3xx: "),e("strong",[t._v("重定向")]),t._v("状态，资源位置发生变动，需要重新请求。")]),t._v(" "),e("li",[t._v("4xx: "),e("strong",[t._v("请求报文有误")]),t._v("。")]),t._v(" "),e("li",[t._v("5xx: "),e("strong",[t._v("服务器发生错误")]),t._v("。")])]),t._v(" "),e("p",[t._v("接下来我们就一一分析这里面具体的状态码。")]),t._v(" "),e("h3",{attrs:{id:"_1xx"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1xx"}},[t._v("#")]),t._v(" 1xx")]),t._v(" "),e("p",[e("strong",[t._v("101 Switching Protocols")]),t._v("。切换到新的 HTTP 版本比旧版本更有优势，或者切换到一个实时且同步的协议以传送利用此类特性的资源。比如在"),e("code",[t._v("HTTP")]),t._v("升级为"),e("code",[t._v("WebSocket")]),t._v("的时候，如果服务器同意变更，就会发送状态码 101。")]),t._v(" "),e("h3",{attrs:{id:"_2xx"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2xx"}},[t._v("#")]),t._v(" 2xx")]),t._v(" "),e("p",[e("strong",[t._v("200 OK")]),t._v(" 是见得最多的成功状态码。通常在响应体中放有数据。")]),t._v(" "),e("p",[e("strong",[t._v("204 No Content")]),t._v(": 服务器成功处理了请求，但不需要返回任何实体内容，并且希望返回更新了的元信息, 含义与 "),e("code",[t._v("200")]),t._v(" 相同，但响应头后没有 "),e("strong",[t._v("body")]),t._v(" 数据。")]),t._v(" "),e("p",[e("strong",[t._v("206 Partial Content")]),t._v(": 顾名思义，表示部分内容，它的使用场景为 "),e("strong",[t._v("HTTP 分块下载")]),t._v("和"),e("strong",[t._v("断点续传")]),t._v("，当然也会带上相应的响应头字段"),e("code",[t._v("Content-Range")]),t._v("。")]),t._v(" "),e("h3",{attrs:{id:"_3xx"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3xx"}},[t._v("#")]),t._v(" 3xx")]),t._v(" "),e("p",[e("strong",[t._v("301 Moved Permanently")]),t._v(": 被请求的资源已永久移动到新位置，即"),e("strong",[t._v("永久重定向")]),t._v("，对应着"),e("code",[t._v("302 Found")]),t._v("，即"),e("strong",[t._v("临时重定向")]),t._v("。")]),t._v(" "),e("p",[t._v("比如你的网站从 HTTP 升级到了 HTTPS 了，以前的站点再也不用了，应当返回 301，这个时候浏览器默认会做"),e("strong",[t._v("缓存优化")]),t._v("，在第二次访问的时候自动访问重定向的那个地址。\n而如果只是暂时不可用，那么直接返回 302 即可，和 301 不同的是，浏览器并不会做缓存优化。")]),t._v(" "),e("p",[e("strong",[t._v("304 Not Modified")]),t._v(": 当"),e("strong",[t._v("协商缓存命中")]),t._v("时会返回这个状态码。详见"),e("a",{attrs:{href:"https://golderbrother.github.io/blog/views/fe-interview/browser-cache.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("浏览器缓存一探究竟~"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"_4xx"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4xx"}},[t._v("#")]),t._v(" 4xx")]),t._v(" "),e("p",[e("strong",[t._v("400 Bad Request")]),t._v(": "),e("strong",[t._v("语义有误")]),t._v("或者"),e("strong",[t._v("请求参数有误")]),t._v(", 开发者经常看到一头雾水，只是笼统地提示了一下错误，并不知道哪里出错了。")]),t._v(" "),e("p",[e("strong",[t._v("401 Unauthorized")]),t._v(": 当前请求"),e("strong",[t._v("需要用户验证")]),t._v(", 表示发送的请求需要有通过 "),e("strong",[t._v("HTTP 认证")]),t._v("的认证信息")]),t._v(" "),e("p",[e("strong",[t._v("403 Forbidden")]),t._v(": 服务器已经理解请求，但是拒绝执行它, 这实际上并不是请求报文出错，而是服务器禁止访问，原因有很多，比如法律禁止、信息敏感。")]),t._v(" "),e("p",[e("strong",[t._v("404 Not Found")]),t._v(": 资源未找到，表示没在服务器上找到相应的资源。")]),t._v(" "),e("p",[e("strong",[t._v("405 Method Not Allowed")]),t._v(": 请求行中指定的请求方法不能被用于请求相应的资源，请求方法不被服务器端允许。")]),t._v(" "),e("p",[e("strong",[t._v("406 Not Acceptable")]),t._v(": 请求的资源的内容特性无法满足请求头中的条件，因而无法生成响应实体，资源无法满足客户端的条件。")]),t._v(" "),e("p",[e("strong",[t._v("408 Request Timeout")]),t._v(": 客户端请求超时，服务器等待了太长时间。")]),t._v(" "),e("p",[e("strong",[t._v("409 Conflict")]),t._v(": 由于和被请求的资源的当前状态之间存在冲突，请求无法完成，相当于多个请求发生了冲突。")]),t._v(" "),e("p",[e("strong",[t._v("413 Request Entity Too Large")]),t._v(": 请求体的数据过大, 服务器拒绝处理当前请求。")]),t._v(" "),e("p",[e("strong",[t._v("414 Request-URI Too Long")]),t._v(": 请求行里的 "),e("code",[t._v("URI")]),t._v(" 太大，长度超过了服务器能够解释的长度。")]),t._v(" "),e("p",[e("strong",[t._v("429 Too Many Request")]),t._v(": 客户端发送的请求过多。")]),t._v(" "),e("p",[e("strong",[t._v("431 Request Header Fields Too Large")]),t._v("：请求头的字段内容太大。")]),t._v(" "),e("h3",{attrs:{id:"_5xx"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5xx"}},[t._v("#")]),t._v(" 5xx")]),t._v(" "),e("p",[e("strong",[t._v("500 Internal Server Error")]),t._v(": 服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。一般来说，这个问题都会在服务器的程序码出错时出现，但是出了啥错咱也不知道。")]),t._v(" "),e("p",[e("strong",[t._v("501 Not Implemented")]),t._v(": 表示客户端请求的功能服务器还不支持。")]),t._v(" "),e("p",[e("strong",[t._v("502 Bad Gateway")]),t._v(": 作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应，服务器自身是正常的，但访问的时候出错了。")]),t._v(" "),e("p",[e("strong",[t._v("503 Service Unavailable")]),t._v(": 由于临时的服务器维护或者过载，服务器当前无法处理请求。表示服务器当前很忙，暂时无法响应服务。")]),t._v(" "),e("h2",{attrs:{id:"_005-简要概括一下-http-的特点？http-有哪些缺点？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_005-简要概括一下-http-的特点？http-有哪些缺点？"}},[t._v("#")]),t._v(" 005: 简要概括一下 HTTP 的特点？HTTP 有哪些缺点？")]),t._v(" "),e("p",[t._v("HTTP 的特点概括如下:")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("灵活可扩展，主要体现在两个方面。一个是语义上的自由，只规定了基本格式，比如空格分隔单词，换行分隔字段，其他的各个部分都没有严格的语法限制。另一个是传输形式的多样性，不仅仅可以传输文本，还能传输图片、视频等任意数据，非常方便。")])]),t._v(" "),e("li",[e("p",[t._v("可靠传输。"),e("code",[t._v("HTTP")]),t._v(" 基于 "),e("code",[t._v("TCP/IP")]),t._v("，因此把这一特性继承了下来。这属于 "),e("code",[t._v("TCP")]),t._v(" 的特性，不具体介绍了。")])]),t._v(" "),e("li",[e("p",[t._v("请求-应答。也就是"),e("strong",[t._v("一发一收、有来有回")]),t._v("， 当然这个请求方和应答方不单单指"),e("strong",[t._v("客户端")]),t._v("和"),e("strong",[t._v("服务器")]),t._v("之间，如果某台服务器作为"),e("strong",[t._v("代理")]),t._v("来"),e("strong",[t._v("连接后端")]),t._v("的服务端，那么这台服务器也会扮演"),e("strong",[t._v("请求方")]),t._v("的角色。")])]),t._v(" "),e("li",[e("p",[t._v("无状态。这里的状态是指"),e("strong",[t._v("通信过程的上下文信息")]),t._v("，而每次 "),e("code",[t._v("http")]),t._v(" 请求都是"),e("strong",[t._v("独立、无关")]),t._v("的，默认不需要保留状态信息。")])])]),t._v(" "),e("h3",{attrs:{id:"http-缺点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-缺点"}},[t._v("#")]),t._v(" HTTP 缺点")]),t._v(" "),e("h4",{attrs:{id:"无状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#无状态"}},[t._v("#")]),t._v(" 无状态")]),t._v(" "),e("p",[t._v("所谓的优点和缺点还是要分场景来看的，对于 "),e("code",[t._v("HTTP")]),t._v(" 而言，最具争议的地方在于它的"),e("strong",[t._v("无状态")]),t._v("。")]),t._v(" "),e("p",[t._v("在需要"),e("strong",[t._v("长连接")]),t._v("的场景中，需要保存大量的"),e("strong",[t._v("上下文信息")]),t._v("，以免传输大量重复的信息，那么这时候"),e("strong",[t._v("无状态")]),t._v("就是 "),e("code",[t._v("http")]),t._v(" 的缺点了。")]),t._v(" "),e("p",[t._v("但与此同时，另外一些应用仅仅只是为了获取一些数据，"),e("strong",[t._v("不需要保存连接上下文信息")]),t._v("，"),e("strong",[t._v("无状态")]),t._v("反而减少了网络开销，成为了 "),e("code",[t._v("http")]),t._v(" 的优点。")]),t._v(" "),e("h4",{attrs:{id:"明文传输"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#明文传输"}},[t._v("#")]),t._v(" 明文传输")]),t._v(" "),e("p",[t._v("即协议里的报文(主要指的是头部)不使用二进制数据，而是文本形式。")]),t._v(" "),e("p",[t._v("这当然对于调试提供了便利，但同时也让 "),e("code",[t._v("HTTP")]),t._v(" 的报文信息暴露给了外界，给攻击者也提供了便利。"),e("code",[t._v("WIFI陷阱")]),t._v("就是利用 "),e("code",[t._v("HTTP")]),t._v(" "),e("strong",[t._v("明文传输")]),t._v("的缺点，诱导你连上热点，然后"),e("strong",[t._v("疯狂抓你所有的流量")]),t._v("，从而拿到你的敏感信息。")]),t._v(" "),e("h4",{attrs:{id:"队头阻塞问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#队头阻塞问题"}},[t._v("#")]),t._v(" 队头阻塞问题")]),t._v(" "),e("p",[t._v("当 "),e("code",[t._v("http")]),t._v(" 开启"),e("strong",[t._v("长连接")]),t._v("时，共用一个 "),e("code",[t._v("TCP")]),t._v(" 连接，同一时刻只能处理一个请求，那么当前请求耗时过长的情况下，其它的请求只能处于阻塞状态，也就是著名的"),e("strong",[t._v("队头阻塞")]),t._v("问题。接下来会有一小节讨论这个问题。")]),t._v(" "),e("h2",{attrs:{id:"_006-对-accept-系列字段了解多少？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_006-对-accept-系列字段了解多少？"}},[t._v("#")]),t._v(" 006: 对 Accept 系列字段了解多少？")]),t._v(" "),e("p",[t._v("对于 Accept 系列字段的介绍分为四个部分: "),e("strong",[t._v("数据格式、压缩方式、支持语言和字符集")]),t._v("。")]),t._v(" "),e("h3",{attrs:{id:"数据格式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据格式"}},[t._v("#")]),t._v(" 数据格式")]),t._v(" "),e("p",[t._v("上一节谈到 HTTP 灵活的特性，它支持非常多的数据格式，那么这么多格式的数据一起到达客户端，客户端怎么知道它的格式呢？")]),t._v(" "),e("p",[t._v("当然，最低效的方式是直接猜，有没有更好的方式呢？直接指定可以吗？")]),t._v(" "),e("p",[t._v("答案是肯定的。不过首先需要介绍一个标准——"),e("strong",[t._v("MIME")]),t._v("(Multipurpose Internet Mail Extensions, "),e("strong",[t._v("多用途互联网邮件扩展")]),t._v(")。它首先用在电子邮件系统中，让邮件可以发任意类型的数据，这对于 "),e("code",[t._v("HTTP")]),t._v(" 来说也是通用的。")]),t._v(" "),e("p",[t._v("具体而言，这两个字段的取值可以分为下面几类:")]),t._v(" "),e("ul",[e("li",[t._v("text："),e("code",[t._v("text/html, text/plain, text/css")]),t._v(" 等")]),t._v(" "),e("li",[t._v("image: "),e("code",[t._v("image/gif, image/jpeg, image/png")]),t._v(" 等")]),t._v(" "),e("li",[t._v("audio/video: "),e("code",[t._v("audio/mpeg, video/mp4")]),t._v(" 等")]),t._v(" "),e("li",[t._v("application: "),e("code",[t._v("application/json(最常用), application/javascript, application/pdf, application/octet-stream")])])]),t._v(" "),e("h3",{attrs:{id:"压缩方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#压缩方式"}},[t._v("#")]),t._v(" 压缩方式")]),t._v(" "),e("p",[t._v("当然一般这些数据都是会进行编码压缩的，采取什么样的压缩方式就体现在了发送方的"),e("code",[t._v("Content-Encoding")]),t._v("字段上， 同样的，接收什么样的压缩方式体现在了接受方的"),e("code",[t._v("Accept-Encoding")]),t._v("字段上。这个字段的取值有下面几种：")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("gzip")]),t._v(": 当今最流行的压缩格式")]),t._v(" "),e("li",[e("code",[t._v("deflate")]),t._v(": 另外一种著名的压缩格式")]),t._v(" "),e("li",[e("code",[t._v("br")]),t._v(": 一种专门为 "),e("code",[t._v("HTTP")]),t._v(" 发明的压缩算法")])]),t._v(" "),e("p",[t._v("比如：")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 发送端")]),t._v("\nContent"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Encoding"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" gzip\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 接收端")]),t._v("\nAccept"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Encoding"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" gzip\n")])])]),e("h3",{attrs:{id:"支持语言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#支持语言"}},[t._v("#")]),t._v(" 支持语言")]),t._v(" "),e("p",[t._v("对于发送方而言，还有一个 "),e("code",[t._v("Content-Language")]),t._v(" 字段，在需要实现国际化的方案当中，可以用来指定支持的语言，在接受方对应的字段为 "),e("code",[t._v("Accept-Language")]),t._v("。如:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("Accept"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Language"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" zh"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CN")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("zh"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("q"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.9")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("en"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("q"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.8")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("en"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("US")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("q"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.7")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("zh"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TW")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("q"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.6")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ko"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("q"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.5")]),t._v("\n")])])]),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 发送端")]),t._v("\nContent"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Language"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" zh"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CN")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" zh"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" en\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 接收端")]),t._v("\nAccept"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Language"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" zh"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CN")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" zh"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" en\n\n")])])]),e("h3",{attrs:{id:"字符集"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字符集"}},[t._v("#")]),t._v(" 字符集")]),t._v(" "),e("p",[t._v("最后是一个比较特殊的字段, 在接收端对应为"),e("code",[t._v("Accept-Charset")]),t._v("，指定可以接受的字符集，而在发送端并没有对应的"),e("code",[t._v("Content-Charset")]),t._v(", 而是直接放在了"),e("code",[t._v("Content-Type")]),t._v("中，以"),e("code",[t._v("charset")]),t._v("属性指定。如:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 发送端")]),t._v("\nContent"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Type"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" application"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("json"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" charset"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("utf"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 接收端")]),t._v("\nAccept"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Charset"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" charset"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("utf"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("\n\n")])])]),e("p",[t._v("最后以一张图来总结一下吧:")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/3/22/170ffd6bb6d09c2d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),t._v(" "),e("h2",{attrs:{id:"_007-对于定长和不定长的数据，http-是怎么传输的？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_007-对于定长和不定长的数据，http-是怎么传输的？"}},[t._v("#")]),t._v(" 007: 对于定长和不定长的数据，HTTP 是怎么传输的？")]),t._v(" "),e("h3",{attrs:{id:"定长包体"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#定长包体"}},[t._v("#")]),t._v(" 定长包体")]),t._v(" "),e("p",[t._v("对于定长包体而言，发送端在传输的时候一般会带上 "),e("code",[t._v("Content-Length")]),t._v(", 来指明包体的长度。")]),t._v(" "),e("p",[t._v("我们用一个 "),e("code",[t._v("nodejs")]),t._v(" 服务器来模拟一下:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" http "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" server "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" http"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("createServer")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nserver"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'request'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("req"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" res")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("req"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("url "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    res"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setHeader")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Content-Type'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'text/plain'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    res"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setHeader")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Content-Length'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    res"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'helloworld'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nserver"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("listen")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8081")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'成功启动'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("启动后访问: "),e("code",[t._v("localhost:8081")]),t._v("。")]),t._v(" "),e("p",[t._v("浏览器中显示如下:")]),t._v(" "),e("p",[e("code",[t._v("helloworld")])]),t._v(" "),e("p",[t._v("这是长度正确的情况，那不正确的情况是如何处理的呢？")]),t._v(" "),e("p",[t._v("我们可以试着把这个长度设置的小一些:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("res"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setHeader")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Content-Length'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("重启服务，再次访问，现在浏览器中内容如下:")]),t._v(" "),e("p",[e("code",[t._v("hellowor")])]),t._v(" "),e("p",[t._v("那后面的 ld 哪里去了呢？实际上在 "),e("code",[t._v("http")]),t._v(" 的响应体中直接被截掉了。")]),t._v(" "),e("p",[t._v("然后我们试着将这个长度设置得大一些:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("res"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setHeader")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Content-Length'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("此时浏览器显示如下:")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/3/22/170ffd6f598bea62?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),t._v(" "),e("p",[t._v("直接无法显示了。可以看到"),e("code",[t._v("Content-Length")]),t._v("对于 "),e("code",[t._v("http")]),t._v(" 传输过程起到了十分关键的作用，如果设置不当可以直接导致传输失败。")]),t._v(" "),e("h3",{attrs:{id:"不定长包体"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#不定长包体"}},[t._v("#")]),t._v(" 不定长包体")]),t._v(" "),e("p",[t._v("上述是针对于"),e("code",[t._v("定长包体")]),t._v("，那么对于"),e("code",[t._v("不定长包体")]),t._v("而言是如何传输的呢？")]),t._v(" "),e("p",[t._v("这里就必须介绍另外一个 http 头部字段了:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("Transfer"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Encoding"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" chunked\n")])])]),e("p",[t._v("表示"),e("strong",[t._v("分块传输数据")]),t._v("，设置这个字段后会自动产生两个效果:")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("Content-Length")]),t._v(" 字段会被"),e("strong",[t._v("忽略")])]),t._v(" "),e("li",[t._v("基于长连接"),e("strong",[t._v("持续推送动态内容")])])]),t._v(" "),e("p",[t._v("我们依然以一个实际的例子来模拟分块传输，nodejs 程序如下:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" http "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" server "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" http"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("createServer")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nserver"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'request'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("req"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" res")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("req"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("url "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    res"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setHeader")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Content-Type'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'text/html; charset=utf8'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    res"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setHeader")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Content-Length'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    res"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setHeader")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Transfer-Encoding'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'chunked'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    res"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<p>来啦</p>'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      res"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'第一次传输<br/>'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      res"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'第二次传输<br/>'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      res"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2000")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nserver"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("listen")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8009")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'成功启动'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("访问效果入下:")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/3/22/170ffd78332368a0?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),t._v(" "),e("p",[t._v("注意，"),e("code",[t._v("Connection: keep-alive")]),t._v("及之前的为"),e("strong",[t._v("响应行")]),t._v("(HTTP/1.1 200 OK)和"),e("strong",[t._v("响应头")]),t._v("(响应行下面的那部分)，后面的内容为响应体，这两部分用"),e("strong",[t._v("换行符")]),t._v("隔开。")]),t._v(" "),e("p",[t._v("响应体的结构比较有意思，如下所示:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("chunk长度(16进制的数)\n第一个chunk的内容\nchunk长度(16进制的数)\n第二个chunk的内容\n......\n0\n\n")])])]),e("p",[t._v("最后是留有有一个"),e("strong",[t._v("空行")]),t._v("的，这一点请大家注意。")]),t._v(" "),e("p",[t._v("以上便是 "),e("code",[t._v("http")]),t._v(" 对于定长数据和不定长数据的传输方式。")]),t._v(" "),e("h2",{attrs:{id:"_008-http-如何处理大文件的传输？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_008-http-如何处理大文件的传输？"}},[t._v("#")]),t._v(" 008: HTTP 如何处理大文件的传输？")]),t._v(" "),e("p",[t._v("对于几百 "),e("code",[t._v("M")]),t._v(" 甚至上 "),e("code",[t._v("G")]),t._v(" 的大文件来说，如果要一口气全部传输过来显然是不现实的，会有大量的等待时间，严重影响用户体验。因此，"),e("code",[t._v("HTTP")]),t._v(" 针对这一场景，采取了范围请求的解决方案，允许客户端仅仅请求一个资源的一部分。")]),t._v(" "),e("h3",{attrs:{id:"如何支持"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何支持"}},[t._v("#")]),t._v(" 如何支持")]),t._v(" "),e("p",[t._v("当然，前提是服务器要支持范围请求，要支持这个功能，就必须加上这样一个响应头:")]),t._v(" "),e("div",{staticClass:"language-http extra-class"},[e("pre",{pre:!0,attrs:{class:"language-http"}},[e("code",[e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Accept-Ranges:")]),t._v(" none\n")])])]),e("p",[t._v("用来告知客户端这边是支持范围请求的。")]),t._v(" "),e("h3",{attrs:{id:"range-字段拆解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#range-字段拆解"}},[t._v("#")]),t._v(" Range 字段拆解")]),t._v(" "),e("p",[t._v("而对于客户端而言，它需要指定请求哪一部分，通过 "),e("code",[t._v("Range")]),t._v(" 这个请求头字段确定，格式为"),e("code",[t._v("bytes=x-y")]),t._v("。接下来就来讨论一下这个 "),e("code",[t._v("Range")]),t._v(" 的书写格式:")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("0-499")]),t._v(" 表示从开始到第 499 个字节。")]),t._v(" "),e("li",[e("code",[t._v("500-")]),t._v(" 表示从第 500 字节到文件终点。")]),t._v(" "),e("li",[e("code",[t._v("-100")]),t._v(" 表示文件的最后 100 个字节。")])]),t._v(" "),e("p",[t._v("服务器收到请求之后，首先验证范围"),e("strong",[t._v("是否合法")]),t._v("，如果越界了那么返回"),e("code",[t._v("416")]),t._v("错误码，否则读取相应片段，返回"),e("code",[t._v("206")]),t._v("状态码(上面说过的服务端"),e("strong",[t._v("返回部分内容")]),t._v(")。")]),t._v(" "),e("p",[t._v("同时，服务器需要添加"),e("code",[t._v("Content-Range")]),t._v("字段，这个字段的格式根据请求头中"),e("code",[t._v("Range")]),t._v("字段的不同而有所差异。")]),t._v(" "),e("p",[t._v("具体来说，请求"),e("code",[t._v("单段数据")]),t._v("和请求"),e("code",[t._v("多段数据")]),t._v("，响应头是不一样的。")]),t._v(" "),e("p",[t._v("举个例子:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 单段数据")]),t._v("\nRange"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" bytes "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 多段数据")]),t._v("\nRange"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bytes "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("39")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("接下来我们就分别来讨论着两种情况。")]),t._v(" "),e("h3",{attrs:{id:"单段数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#单段数据"}},[t._v("#")]),t._v(" 单段数据")]),t._v(" "),e("p",[t._v("对于"),e("code",[t._v("单段数据")]),t._v("的请求，返回的响应如下:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTTP")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.1")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("206")]),t._v(" Partial Content\nContent"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Length"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\nAccept"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Ranges"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" bytes\nContent"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Range"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" bytes "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("\n\ni am xxxxx\n\n")])])]),e("p",[t._v("值得注意的是"),e("code",[t._v("Content-Range")]),t._v("字段，"),e("code",[t._v("0-9")]),t._v("表示请求的返回，"),e("code",[t._v("100")]),t._v("表示资源的总大小，很好理解。")]),t._v(" "),e("h3",{attrs:{id:"多段数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多段数据"}},[t._v("#")]),t._v(" 多段数据")]),t._v(" "),e("p",[t._v("接下来我们看看多段请求的情况。得到的响应会是下面这个形式:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTTP")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.1")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("206")]),t._v(" Partial Content\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 非常关键的字段")]),t._v("\nContent"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Type"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" multipart"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("byteranges"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" boundary"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("00000010101")]),t._v("\nContent"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Length"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("189")]),t._v("\nConnection"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" keep"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("alive\nAccept"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Ranges"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" bytes\n\n\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("00000010101")]),t._v("\nContent"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Type"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" text"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("plain\nContent"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Range"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" bytes "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("96")]),t._v("\n\ni am xxxxx\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("00000010101")]),t._v("\nContent"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Type"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" text"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("plain\nContent"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Range"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" bytes "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("29")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("96")]),t._v("\n\neex jspy e\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("00000010101")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("\n\n")])])]),e("p",[t._v("这个时候出现了一个非常关键的字段"),e("code",[t._v("Content-Type: multipart/byteranges;boundary=00000010101")]),t._v("，它代表了信息量是这样的:")]),t._v(" "),e("ul",[e("li",[t._v("请求一定是多段数据请求")]),t._v(" "),e("li",[t._v("响应体中的分隔符是 00000010101")])]),t._v(" "),e("p",[t._v("因此，在响应体中各段数据之间会由这里指定的分隔符分开，而且在最后的分隔末尾添上"),e("code",[t._v("--")]),t._v("表示结束。")]),t._v(" "),e("p",[t._v("以上就是 http 针对大文件传输所采用的手段。")]),t._v(" "),e("h2",{attrs:{id:"_009-http-中如何处理表单数据的提交？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_009-http-中如何处理表单数据的提交？"}},[t._v("#")]),t._v(" 009: HTTP 中如何处理表单数据的提交？")]),t._v(" "),e("p",[t._v("在 http 中，有两种主要的表单提交的方式，体现在两种不同的"),e("code",[t._v("Content-Type")]),t._v("取值:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("application "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" x "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" www "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" form "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" urlencoded"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmultipart "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" form "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("由于表单提交一般是"),e("code",[t._v("POST")]),t._v("请求，很少考虑"),e("code",[t._v("GET")]),t._v("，因此这里我们将默认提交的数据放在请求体中。")]),t._v(" "),e("h3",{attrs:{id:"application-x-www-form-urlencoded"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#application-x-www-form-urlencoded"}},[t._v("#")]),t._v(" application/x-www-form-urlencoded")]),t._v(" "),e("p",[t._v("对于"),e("code",[t._v("application/x-www-form-urlencoded")]),t._v("格式的表单内容，有以下特点:")]),t._v(" "),e("ul",[e("li",[t._v("其中的数据会被编码成以"),e("code",[t._v("&")]),t._v("分隔的键值对")]),t._v(" "),e("li",[t._v("字符以"),e("code",[t._v("URL")]),t._v("编码方式编码。")])]),t._v(" "),e("p",[t._v("如：")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 转换过程: {a: 1, b: 2} -> a=1&b=2 -> 如下(最终形式)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a%3D1%26b%3D2'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 相当于如下URI编码")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("encodeURIComponent")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("a=1&b=2")]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a%3D1%26b%3D2")]),t._v("\n")])])]),e("h3",{attrs:{id:"multipart-form-data"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#multipart-form-data"}},[t._v("#")]),t._v(" multipart/form-data")]),t._v(" "),e("p",[t._v("对于"),e("code",[t._v("multipart/form-data")]),t._v("而言:")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("请求头中的"),e("code",[t._v("Content-Type")]),t._v("字段会包含"),e("code",[t._v("boundary")]),t._v("，且"),e("code",[t._v("boundary")]),t._v("的值有浏览器默认指定。例: "),e("code",[t._v("Content-Type: multipart/form-data;boundary=----WebkitFormBoundaryRRJKeWfHPGrS4LKe")]),t._v("。")])]),t._v(" "),e("li",[e("p",[t._v("数据会分为多个部分，每两个部分之间通过分隔符来分隔，每部分表述均有 "),e("code",[t._v("HTTP")]),t._v(" 头部描述子包体，如"),e("code",[t._v("Content-Type")]),t._v("，在最后的分隔符会加上"),e("code",[t._v("--")]),t._v("表示结束。")])])]),t._v(" "),e("p",[t._v("相应的"),e("code",[t._v("请求体")]),t._v("是下面这样:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("Content"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Disposition"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" form"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("name"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"data1"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nContent"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Type"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" text"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("plain\ndata1\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("WebkitFormBoundaryRRJKeWfHPGrS4LKe\nContent"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Disposition"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" form"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("name"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"data2"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nContent"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Type"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" text"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("plain\ndata2\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("WebkitFormBoundaryRRJKeWfHPGrS4LKe"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("\n\n")])])]),e("h3",{attrs:{id:"小结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),e("p",[t._v("值得一提的是，"),e("code",[t._v("multipart/form-data")]),t._v(" 格式最大的特点在于:"),e("strong",[t._v("每一个表单元素都是独立的资源表述")]),t._v("。另外，你可能在写业务的过程中，并没有注意到其中还有"),e("code",[t._v("boundary")]),t._v("的存在，\n如果你打开抓包工具，确实可以看到不同的表单元素被拆分开了，之所以在平时感觉不到，是以为浏览器和 "),e("code",[t._v("HTTP")]),t._v(" 给你封装了这一系列操作。")]),t._v(" "),e("p",[t._v("而且，在实际的场景中，对于"),e("strong",[t._v("图片等文件的上传")]),t._v("，基本采用"),e("strong",[t._v("multipart/form-data")]),t._v("而不用"),e("code",[t._v("application/x-www-form-urlencoded")]),t._v("，因为没有必要做 "),e("code",[t._v("URL")]),t._v(" 编码，带来"),e("strong",[t._v("巨大耗时")]),t._v("的同时也"),e("strong",[t._v("占用了更多的空间")]),t._v("。")]),t._v(" "),e("h2",{attrs:{id:"_010-http1-1-如何解决-http-的队头阻塞问题？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_010-http1-1-如何解决-http-的队头阻塞问题？"}},[t._v("#")]),t._v(" 010: HTTP1.1 如何解决 HTTP 的队头阻塞问题？")]),t._v(" "),e("h3",{attrs:{id:"什么是-http-队头阻塞？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是-http-队头阻塞？"}},[t._v("#")]),t._v(" 什么是 HTTP 队头阻塞？")]),t._v(" "),e("p",[t._v("从前面的小节可以知道，"),e("code",[t._v("HTTP")]),t._v(" 传输是基于"),e("strong",[t._v("请求-应答")]),t._v("的模式进行的，报文必须是"),e("strong",[t._v("一发一收")]),t._v("，但值得注意的是，里面的任务被放在一个"),e("strong",[t._v("任务队列")]),t._v("中"),e("strong",[t._v("串行执行")]),t._v("，一旦队首的请求处理太慢，就会"),e("strong",[t._v("阻塞")]),t._v("后面请求的处理。这就是著名的"),e("strong",[t._v("HTTP 队头阻塞")]),t._v("问题。")]),t._v(" "),e("h3",{attrs:{id:"并发连接"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#并发连接"}},[t._v("#")]),t._v(" 并发连接")]),t._v(" "),e("p",[t._v("对于一个域名允许分配多个长连接，那么相当于增加了任务队列，不至于一个队伍的任务阻塞其它所有任务。在"),e("code",[t._v("RFC2616")]),t._v("规定过客户端最多"),e("strong",[t._v("并发 2 个连接")]),t._v("，不过事实上在现在的浏览器标准中，这个上限要多很多，"),e("code",[t._v("Chrome")]),t._v(" 中是 "),e("code",[t._v("6")]),t._v(" 个。")]),t._v(" "),e("p",[t._v("但其实，即使是提高了"),e("strong",[t._v("并发连接")]),t._v("，还是不能满足人们对性能的需求。")]),t._v(" "),e("h3",{attrs:{id:"域名分片"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#域名分片"}},[t._v("#")]),t._v(" 域名分片")]),t._v(" "),e("p",[t._v("一个域名不是可以并发 "),e("code",[t._v("6")]),t._v(" 个"),e("strong",[t._v("长连接")]),t._v("吗？那我们就可以多分几个域名。")]),t._v(" "),e("p",[t._v("比如 "),e("code",[t._v("content1.golderbrother.com 、content2.golderbrother.com")])]),t._v(" "),e("p",[t._v("这样一个"),e("code",[t._v("golderbrother.com")]),t._v("域名下可以分出非常多的二级域名，而它们都指向同样的一台服务器，能够并发的长连接数更多了，事实上也更好地解决了队头阻塞的问题。")]),t._v(" "),e("h2",{attrs:{id:"_011-对-cookie-了解多少？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_011-对-cookie-了解多少？"}},[t._v("#")]),t._v(" 011: 对 Cookie 了解多少？")]),t._v(" "),e("h3",{attrs:{id:"cookie-简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cookie-简介"}},[t._v("#")]),t._v(" Cookie 简介")]),t._v(" "),e("p",[t._v("前面说到了 "),e("code",[t._v("HTTP")]),t._v(" 是一个无状态的协议，每次 "),e("code",[t._v("http")]),t._v(" 请求都是"),e("strong",[t._v("独立、无关")]),t._v("的，默认不需要保留状态信息。但有时候需要保存一些状态，怎么办呢？")]),t._v(" "),e("p",[e("code",[t._v("HTTP")]),t._v(" 为此引入了 "),e("code",[t._v("Cookie")]),t._v("。"),e("code",[t._v("Cookie")]),t._v(" 本质上就是浏览器里面存储的一个很小的文本文件，内部以键值对的方式来存储(在"),e("code",[t._v("chrome")]),t._v("开发者面板的"),e("code",[t._v("Application")]),t._v("这一栏可以看到)。向同一个域名下发送请求，都会携带相同的 "),e("code",[t._v("Cookie")]),t._v("，服务器拿到 "),e("code",[t._v("Cookie")]),t._v(" 进行解析，便能拿到客户端的状态。而服务端可以通过响应头中的"),e("code",[t._v("Set-Cookie")]),t._v("字段来对客户端写入"),e("code",[t._v("Cookie")]),t._v("。举例如下:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 请求头")]),t._v("\nCookie"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" a"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("xxx"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("b"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("xxx\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 响应头")]),t._v("\nSet"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Cookie"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" a"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("xxx\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Cookie"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" b"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("xxx\n\n")])])]),e("p",[e("code",[t._v("Cookie")]),t._v(" 的有效期可以通过"),e("code",[t._v("Expires")]),t._v("和"),e("code",[t._v("Max-Age")]),t._v("两个属性来设置。")]),t._v(" "),e("p",[e("code",[t._v("Expires")]),t._v("即过期时间, 比如 "),e("code",[t._v("2020-04-01T02:04:24.377Z")]),t._v(" "),e("code",[t._v("Max-Age")]),t._v("用的是一段时间间隔，单位是秒，从浏览器收到报文开始计算。")]),t._v(" "),e("p",[t._v("若 "),e("code",[t._v("Cookie")]),t._v(" 过期，则这个 "),e("code",[t._v("Cookie")]),t._v(" 会被删除，并不会发送给服务端。")]),t._v(" "),e("h3",{attrs:{id:"cookie-属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cookie-属性"}},[t._v("#")]),t._v(" Cookie 属性")]),t._v(" "),e("h4",{attrs:{id:"生存周期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#生存周期"}},[t._v("#")]),t._v(" 生存周期")]),t._v(" "),e("h3",{attrs:{id:"作用域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#作用域"}},[t._v("#")]),t._v(" 作用域")]),t._v(" "),e("p",[t._v("关于作用域也有两个属性: "),e("code",[t._v("Domain")]),t._v("和"),e("code",[t._v("path")]),t._v(", 给 "),e("code",[t._v("Cookie")]),t._v(" 绑定了域名和路径，在发送请求之前，发现域名或者路径和这两个属性不匹配，那么就不会带上 "),e("code",[t._v("Cookie")]),t._v("。值得注意的是，对于路径来说，"),e("code",[t._v("/")]),t._v("表示域名下的任意路径都允许使用 Cookie。")]),t._v(" "),e("h3",{attrs:{id:"安全相关"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安全相关"}},[t._v("#")]),t._v(" 安全相关")]),t._v(" "),e("p",[t._v("如果带上 "),e("code",[t._v("Secure")]),t._v("，说明只能通过 "),e("code",[t._v("HTTPS")]),t._v(" 传输 "),e("code",[t._v("cookie")]),t._v("。")]),t._v(" "),e("p",[t._v("如果 "),e("code",[t._v("cookie")]),t._v(" 字段带上 "),e("code",[t._v("HttpOnly")]),t._v(" ，那么说明只能通过 "),e("code",[t._v("HTTP")]),t._v(" 协议传输，不能通过 "),e("code",[t._v("JS")]),t._v(" 访问，这也是预防 "),e("code",[t._v("XSS")]),t._v(" 攻击的重要手段。")]),t._v(" "),e("p",[t._v("相应的，对于 "),e("code",[t._v("CSRF")]),t._v(" 攻击的预防，也有 "),e("code",[t._v("SameSite")]),t._v(" 属性。")]),t._v(" "),e("p",[e("code",[t._v("SameSite")]),t._v(" 可以设置为三个值，"),e("code",[t._v("Strict、Lax和None")]),t._v("。")]),t._v(" "),e("p",[t._v("a. 在 "),e("code",[t._v("Strict")]),t._v(" 模式下，浏览器完全禁止第三方请求携带 "),e("code",[t._v("Cookie")]),t._v(" 。比如请求 "),e("code",[t._v("golderbrother.cn")]),t._v(" 网站只能在"),e("code",[t._v("golderbrother.cn")]),t._v("域名当中请求才能携带 "),e("code",[t._v("Cookie")]),t._v(" ，在其他网站请求都不能。")]),t._v(" "),e("p",[t._v("b. 在 "),e("code",[t._v("Lax")]),t._v(" 模式，就宽松一点了，但是只能在 "),e("code",[t._v("get")]),t._v(" 方法"),e("strong",[t._v("提交表单")]),t._v("或者 "),e("code",[t._v("a 标签")]),t._v(" 发送 "),e("code",[t._v("get")]),t._v(" 请求的情况下可以携带 "),e("code",[t._v("Cookie")]),t._v("，其他情况均不能。")]),t._v(" "),e("p",[t._v("c. 在 "),e("code",[t._v("None")]),t._v(" 模式下，也就是默认模式，请求会自动携带上 "),e("code",[t._v("Cookie")]),t._v(" 。")]),t._v(" "),e("h2",{attrs:{id:"cookie-的缺点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cookie-的缺点"}},[t._v("#")]),t._v(" Cookie 的缺点")]),t._v(" "),e("ol",[e("li",[e("p",[e("strong",[t._v("容量缺陷")]),t._v("。"),e("code",[t._v("Cookie")]),t._v(" 的体积上限只有"),e("code",[t._v("4KB")]),t._v("，只能用来存储少量的信息。")])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("性能缺陷")]),t._v("。"),e("code",[t._v("Cookie")]),t._v(" 紧跟域名，不管域名下面的某一个地址需不需要这个 "),e("code",[t._v("Cookie")]),t._v(" ，请求都会携带上完整的 "),e("code",[t._v("Cookie")]),t._v("，这样随着请求数的增多，其实会造成巨大的性能浪费的，因为请求"),e("strong",[t._v("携带了很多不必要的内容")]),t._v("。但可以通过"),e("code",[t._v("Domain")]),t._v("和"),e("code",[t._v("Path")]),t._v("指定作用域来解决。")])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("安全缺陷")]),t._v("。由于 "),e("code",[t._v("Cookie")]),t._v(" 以纯文本的形式在浏览器和服务器中传递，很容易被非法用户截获，然后进行一系列的篡改，在 "),e("code",[t._v("Cookie")]),t._v(" 的有效期内重新发送给服务器，这是相当危险的。另外，在 "),e("code",[t._v("HttpOnly")]),t._v(" 为 "),e("code",[t._v("false")]),t._v(" 的情况下，"),e("code",[t._v("Cookie")]),t._v(" 信息能直接通过前端 "),e("code",[t._v("JS 脚本")]),t._v("来"),e("strong",[t._v("读取")]),t._v("。")])])]),t._v(" "),e("h3",{attrs:{id:"_012-如何理解-http-代理？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_012-如何理解-http-代理？"}},[t._v("#")]),t._v(" 012: 如何理解 HTTP 代理？")]),t._v(" "),e("p",[t._v("我们知道在 HTTP 是基于请求-响应模型的协议，一般由"),e("strong",[t._v("客户端发请求")]),t._v("，"),e("strong",[t._v("服务器来进行响应")]),t._v("。")]),t._v(" "),e("p",[t._v("当然，也有特殊情况，就是"),e("strong",[t._v("代理服务器")]),t._v("的情况。引入代理之后，作为代理的服务器相当于一个"),e("strong",[t._v("中间人")]),t._v("的角色，"),e("strong",[t._v("对于客户端而言，表现为服务器进行响应")]),t._v("；而对于"),e("strong",[t._v("源服务器，表现为客户端发起请求")]),t._v("，具有"),e("strong",[t._v("双重身份")]),t._v("。\n比如我们在日常工作中，会使用 "),e("code",[t._v("NodeJS")]),t._v(" 作为中间端来"),e("strong",[t._v("转发客户端请求到")]),t._v("真正的服务端，接收到响应体后再经过我们自己的数据处理，最终返回给客户端。")]),t._v(" "),e("p",[t._v("那代理服务器仅仅只是做个"),e("strong",[t._v("中间商")]),t._v("吗？还能用来做什么的呢？")]),t._v(" "),e("h3",{attrs:{id:"功能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#功能"}},[t._v("#")]),t._v(" 功能")]),t._v(" "),e("h4",{attrs:{id:"_1-负载均衡"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-负载均衡"}},[t._v("#")]),t._v(" 1. 负载均衡")]),t._v(" "),e("p",[t._v("客户端的请求只会先到达代理服务器，后面到底有多少源服务器，IP 都是多少，客户端是不知道的。因此，这个代理服务器可以拿到这个请求之后，可以通过特定的算法分发给不同的源服务器，让各台源服务器的负载尽量平均。当然，这样的算法有很多，包括"),e("strong",[t._v("随机算法")]),t._v("、"),e("strong",[t._v("轮询")]),t._v("、"),e("strong",[t._v("一致性 hash")]),t._v("、"),e("strong",[t._v("LRU")]),t._v("("),e("code",[t._v("最近最少使用")]),t._v(")等等，不过这些算法并不是本文的重点，大家有兴趣自己可以研究一下。")]),t._v(" "),e("h4",{attrs:{id:"_2-保障安全"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-保障安全"}},[t._v("#")]),t._v(" 2. 保障安全")]),t._v(" "),e("p",[t._v("利用"),e("strong",[t._v("心跳")]),t._v("机制监控后台的服务器，一旦发现故障机就将其踢出集群。并且对于上下行的数据进行过滤，对非法 IP 限流，这些都是代理服务器的工作。")]),t._v(" "),e("h4",{attrs:{id:"_3-缓存代理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-缓存代理"}},[t._v("#")]),t._v(" 3. 缓存代理")]),t._v(" "),e("p",[t._v("将内容缓存到代理服务器，使得客户端可以直接从代理服务器获得而不用到源服务器那里。下一节详细拆解。")]),t._v(" "),e("h3",{attrs:{id:"相关头部字段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#相关头部字段"}},[t._v("#")]),t._v(" 相关头部字段")]),t._v(" "),e("h4",{attrs:{id:"via"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#via"}},[t._v("#")]),t._v(" Via")]),t._v(" "),e("p",[t._v("如果代理服务器需要标明自己的身份，在 HTTP 传输中留下自己的痕迹，那怎么办呢？")]),t._v(" "),e("p",[t._v("我们可以通过"),e("code",[t._v("Via")]),t._v("字段来记录。举个例子，现在中间有两台代理服务器，在客户端发送请求后会经历这样一个过程:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("客户端 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 代理"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 代理"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 源服务器\n")])])]),e("p",[t._v("在源服务器收到请求后，我们会在"),e("strong",[t._v("请求头")]),t._v("拿到这个字段:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("Via"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" proxy_server1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" proxy_server2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("而源服务器响应时，最终在客户端会拿到这样的"),e("strong",[t._v("响应头")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("Via"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" proxy_server2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" proxy_server1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("可以看到，"),e("code",[t._v("Via")]),t._v("中代理的顺序即为在 "),e("code",[t._v("HTTP")]),t._v(" 传输中"),e("strong",[t._v("报文传达")]),t._v("的顺序(proxy_server1 -> proxy_server2 -> source)。")]),t._v(" "),e("h4",{attrs:{id:"x-forwarded-for"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#x-forwarded-for"}},[t._v("#")]),t._v(" X-Forwarded-For")]),t._v(" "),e("p",[t._v("字面意思就是"),e("strong",[t._v("为谁转发")]),t._v(", 它记录的是"),e("strong",[t._v("请求方")]),t._v("的"),e("code",[t._v("IP")]),t._v("地址(注意，和"),e("code",[t._v("Via")]),t._v("区分开，"),e("code",[t._v("X-Forwarded-For")]),t._v("记录的是请求方这一个"),e("code",[t._v("IP")]),t._v(")。")]),t._v(" "),e("h4",{attrs:{id:"x-real-ip"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#x-real-ip"}},[t._v("#")]),t._v(" X-Real-IP")]),t._v(" "),e("p",[t._v("是一种获取用户真实 "),e("code",[t._v("IP")]),t._v(" 的字段，不管中间经过多少代理，这个字段始终记录最初的客户端的"),e("code",[t._v("IP")]),t._v("。")]),t._v(" "),e("p",[t._v("相应的，还有 "),e("code",[t._v("X-Forwarded-Host")]),t._v(" 和 "),e("code",[t._v("X-Forwarded-Proto")]),t._v(" ，分别记录客户端(注意哦，不包括代理)的"),e("strong",[t._v("域名")]),t._v("和"),e("strong",[t._v("协议名")]),t._v("。")]),t._v(" "),e("h4",{attrs:{id:"x-forwarded-for-产生的问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#x-forwarded-for-产生的问题"}},[t._v("#")]),t._v(" X-Forwarded-For 产生的问题")]),t._v(" "),e("p",[t._v("前面可以看到，"),e("code",[t._v("X-Forwarded-For")]),t._v("这个字段记录的是请求方的 "),e("code",[t._v("IP")]),t._v("，这意味着每经过一个不同的代理，这个字段的名字都要变，从"),e("code",[t._v("客户端")]),t._v("到"),e("code",[t._v("代理1")]),t._v("，这个字段是客户端的 "),e("code",[t._v("IP")]),t._v("，从"),e("code",[t._v("代理1")]),t._v("到"),e("code",[t._v("代理2")]),t._v("，这个字段就变为了"),e("code",[t._v("代理1")]),t._v("的 "),e("code",[t._v("IP")]),t._v("。")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("客户端 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 代理"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 代理"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n  客户端 "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("IP")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 代理"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("IP")]),t._v("\n")])])]),e("p",[t._v("但是这会产生两个问题:")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("意味着代理必须解析 "),e("code",[t._v("HTTP")]),t._v(" 请求头，然后修改，比直接转发数据性能下降。")])]),t._v(" "),e("li",[e("p",[t._v("在 "),e("code",[t._v("HTTPS")]),t._v(" 通信加密的过程中，原始报文是不允许修改的。")])])]),t._v(" "),e("p",[t._v("由此产生了"),e("code",[t._v("代理协议")]),t._v("，一般使用明文版本，只需要在 "),e("code",[t._v("HTTP")]),t._v(" 请求行上面加上这样格式的文本即可:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// PROXY + TCP4/TCP6 + 请求方地址(0.0.0.1) + 接收方地址(0.0.0.2) + 请求端口(1111) + 接收端口(2222)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PROXY")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TCP4")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v(".0")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v(".1")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v(".0")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v(".2")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1111")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2222")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("GET")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTTP")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.1")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n\n")])])]),e("p",[t._v("这样就可以解决"),e("code",[t._v("X-Forwarded-For")]),t._v("带来的问题了。")]),t._v(" "),e("h3",{attrs:{id:"_013-如何理解-http-缓存及缓存代理？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_013-如何理解-http-缓存及缓存代理？"}},[t._v("#")]),t._v(" 013: 如何理解 HTTP 缓存及缓存代理？")]),t._v(" "),e("p",[t._v("关于强缓存和协商缓存的内容，我已经在"),e("a",{attrs:{href:"https://golderbrother.github.io/blog/views/fe-interview/browser-cache.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("浏览器缓存一探究竟~"),e("OutboundLink")],1),t._v("做了详细分析，小结如下:")]),t._v(" "),e("p",[t._v("首先通过 "),e("code",[t._v("Cache-Control")]),t._v(" "),e("strong",[t._v("验证强缓存")]),t._v("是否可用")]),t._v(" "),e("ul",[e("li",[t._v("如果强缓存可用，直接使用")]),t._v(" "),e("li",[t._v("否则进入"),e("strong",[t._v("协商缓存")]),t._v("即发送 HTTP 请求，服务器通过请求头中的"),e("code",[t._v("If-Modified-Since")]),t._v("或者"),e("code",[t._v("If-None-Match")]),t._v("这些条件请求字段检查资源是否更新\n"),e("ul",[e("li",[t._v("若资源更新，返回资源和"),e("code",[t._v("200")]),t._v("状态码")]),t._v(" "),e("li",[t._v("否则，返回"),e("code",[t._v("304")]),t._v("，告诉浏览器直接"),e("strong",[t._v("从缓存获取资源")])])])])]),t._v(" "),e("p",[t._v("这一节我们主要来说说另外一种缓存方式: "),e("strong",[t._v("代理缓存")]),t._v("。")]),t._v(" "),e("h4",{attrs:{id:"为什么产生代理缓存？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么产生代理缓存？"}},[t._v("#")]),t._v(" 为什么产生代理缓存？")]),t._v(" "),e("p",[t._v("对于源服务器来说，它也是有缓存的，比如"),e("code",[t._v("Redis, Memcache")]),t._v("，但对于 "),e("code",[t._v("HTTP 缓存")]),t._v("来说，如果每次客户端缓存失效都要到源服务器获取，那给源服务器的压力是很大的。")]),t._v(" "),e("p",[t._v("由此引入了"),e("strong",[t._v("缓存代理")]),t._v("的机制。让代理服务器"),e("strong",[t._v("接管")]),t._v("一部分的"),e("strong",[t._v("服务端 HTTP 缓存")]),t._v("，客户端缓存过期后就近到代理缓存中获取，代理缓存过期了才请求源服务器，这样流量巨大的时候能明显降低源服务器的压力。")]),t._v(" "),e("p",[t._v("那缓存代理究竟是如何做到的呢？")]),t._v(" "),e("p",[t._v("总的来说，缓存代理的控制分为两部分，一部分是"),e("strong",[t._v("源服务器端")]),t._v("的控制，一部分是"),e("strong",[t._v("客户端")]),t._v("的控制。")]),t._v(" "),e("h4",{attrs:{id:"源服务器的缓存控制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#源服务器的缓存控制"}},[t._v("#")]),t._v(" 源服务器的缓存控制")]),t._v(" "),e("h5",{attrs:{id:"private-和-public"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#private-和-public"}},[t._v("#")]),t._v(" private 和 public")]),t._v(" "),e("p",[t._v("在源服务器的响应头中，会加上"),e("code",[t._v("Cache-Control")]),t._v("这个字段进行缓存控制字段，那么它的值当中可以加入"),e("code",[t._v("private")]),t._v("或者"),e("code",[t._v("public")]),t._v("表示是否允许代理服务器缓存，前者"),e("strong",[t._v("禁止")]),t._v("，后者为"),e("strong",[t._v("允许")]),t._v("。")]),t._v(" "),e("p",[t._v("比如对于一些非常私密的数据，如果缓存到代理服务器，别人直接访问代理就可以拿到这些数据，是非常危险的，因此对于这些数据一般是不会允许代理服务器进行缓存的，将响应头部的"),e("code",[t._v("Cache-Control")]),t._v("设为"),e("code",[t._v("private")]),t._v("，而不是"),e("code",[t._v("public")]),t._v("。")]),t._v(" "),e("p",[t._v("就像下面这样:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("Cache"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("control"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v("\n")])])]),e("h5",{attrs:{id:"proxy-revalidate"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#proxy-revalidate"}},[t._v("#")]),t._v(" proxy-revalidate")]),t._v(" "),e("p",[e("code",[t._v("must-revalidate")]),t._v("的意思是"),e("strong",[t._v("客户端")]),t._v("缓存过期就去源服务器获取，而"),e("code",[t._v("proxy-revalidate")]),t._v("则表示"),e("strong",[t._v("代理服务器")]),t._v("的缓存过期后到源服务器获取。")]),t._v(" "),e("h5",{attrs:{id:"s-maxage"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#s-maxage"}},[t._v("#")]),t._v(" s-maxage")]),t._v(" "),e("p",[e("code",[t._v("s")]),t._v("是"),e("code",[t._v("share")]),t._v("的意思，限定了缓存在"),e("strong",[t._v("代理服务器")]),t._v("中可以"),e("strong",[t._v("存放多久")]),t._v("(缓存时间)，和限制客户端缓存时间的"),e("code",[t._v("max-age")]),t._v("并不冲突。")]),t._v(" "),e("p",[t._v("讲了这几个字段，我们不妨来举个小例子，源服务器在响应头中加入这样一个字段:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("Cache"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Control"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" max"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("age"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" s"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("maxage"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2000")]),t._v("\n\n")])])]),e("p",[t._v("相当于源服务器说: 我这个响应是允许"),e("strong",[t._v("代理服务器缓存")]),t._v("的，客户端缓存过期了到代理中拿，并且在客户端的"),e("strong",[t._v("缓存时间")]),t._v("为 "),e("code",[t._v("1000 s")]),t._v("，在代理服务器中的"),e("strong",[t._v("缓存时间")]),t._v("为 "),e("code",[t._v("2000 s")]),t._v("。")]),t._v(" "),e("h4",{attrs:{id:"客户端的缓存控制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#客户端的缓存控制"}},[t._v("#")]),t._v(" 客户端的缓存控制")]),t._v(" "),e("h5",{attrs:{id:"max-stale-和-min-fresh"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#max-stale-和-min-fresh"}},[t._v("#")]),t._v(" max-stale 和 min-fresh")]),t._v(" "),e("p",[t._v("在客户端的请求头中，可以加入这两个字段，来对代理服务器上的缓存进行"),e("strong",[t._v("宽容")]),t._v("和"),e("strong",[t._v("限制")]),t._v("操作。比如：")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("max"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("stale"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n\n")])])]),e("p",[t._v("表示客户端到代理服务器上拿缓存的时候，即使代理"),e("strong",[t._v("缓存过期了也不要紧")]),t._v("，只要"),e("strong",[t._v("过期时间在 5 秒之内")]),t._v("，还是可以从代理中获取的。")]),t._v(" "),e("p",[t._v("又比如:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("min"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("fresh"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n\n")])])]),e("p",[t._v("表示代理缓存需要一定的"),e("strong",[t._v("新鲜度")]),t._v("，不要等到缓存刚好到期再拿，一定要在"),e("strong",[t._v("到期前 5 秒之前")]),t._v("的时间拿，否则拿不到。")]),t._v(" "),e("h5",{attrs:{id:"only-if-cached"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#only-if-cached"}},[t._v("#")]),t._v(" only-if-cached")]),t._v(" "),e("p",[t._v("这个字段加上后表示客户端只会接受"),e("strong",[t._v("代理缓存")]),t._v("，而不会接受源服务器的响应。如果"),e("strong",[t._v("代理缓存")]),t._v("无效，则直接返回"),e("code",[t._v("504（Gateway Timeout）")]),t._v("。")]),t._v(" "),e("p",[t._v("以上便是缓存代理的内容，涉及的字段比较多，希望能好好回顾一下，加深理解。")]),t._v(" "),e("h2",{attrs:{id:"_014-什么是跨域？浏览器如何拦截响应？如何解决？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_014-什么是跨域？浏览器如何拦截响应？如何解决？"}},[t._v("#")]),t._v(" 014: 什么是跨域？浏览器如何拦截响应？如何解决？")]),t._v(" "),e("p",[t._v("在前后端分离的开发模式中，经常会遇到跨域问题，即 Ajax 请求发出去了，服务器也成功响应了，前端就是拿不到这个响应。接下来我们就来好好讨论一下这个问题。")]),t._v(" "),e("h3",{attrs:{id:"那什么是跨域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#那什么是跨域"}},[t._v("#")]),t._v(" 那什么是跨域")]),t._v(" "),e("p",[t._v("咱们来回顾一下 "),e("code",[t._v("URI")]),t._v(" 的组成:")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/3/22/170ffd7ac23846fe?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),t._v(" "),e("p",[t._v("浏览器遵循"),e("strong",[t._v("同源政策")]),t._v("("),e("code",[t._v("scheme(协议)")]),t._v("、"),e("code",[t._v("host(主机)")]),t._v("和"),e("code",[t._v("port(端口)")]),t._v("都相同则为同源)。非同源站点有这样一些限制:")]),t._v(" "),e("ul",[e("li",[t._v("不能读取和修改对方的 DOM")]),t._v(" "),e("li",[t._v("不读访问对方的 Cookie、IndexDB 和 LocalStorage")]),t._v(" "),e("li",[t._v("限制 XMLHttpRequest 请求。(后面的话题着重围绕这个)")])]),t._v(" "),e("p",[t._v("当浏览器向目标 "),e("code",[t._v("URI")]),t._v(" 发 "),e("code",[t._v("Ajax")]),t._v(" 请求时，只要当前 "),e("code",[t._v("URL")]),t._v(" 和目标 "),e("code",[t._v("URL")]),t._v(" "),e("strong",[t._v("不同源")]),t._v("，则产生"),e("strong",[t._v("跨域")]),t._v("，被称为"),e("code",[t._v("跨域请求")]),t._v("。")]),t._v(" "),e("p",[t._v("跨域请求的响应一般会被浏览器所拦截，注意，是"),e("strong",[t._v("被浏览器拦截")]),t._v("，"),e("strong",[t._v("响应其实是成功到达客户端")]),t._v("了。那这个拦截是如何发生呢？")]),t._v(" "),e("p",[t._v("首先要知道的是，浏览器是多进程的，以 "),e("code",[t._v("Chrome")]),t._v(" 为例，进程组成如下：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/3/22/170ffd8131a4628f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),t._v(" "),e("p",[e("strong",[t._v("WebKit 渲染引擎")]),t._v("和"),e("strong",[t._v("V8 引擎")]),t._v("都在渲染进程当中。")]),t._v(" "),e("p",[t._v("当"),e("code",[t._v("xhr.send")]),t._v("被调用，即 "),e("code",[t._v("Ajax")]),t._v(" 请求准备发送的时候，其实还只是在渲染进程的处理。为了防止黑客通过脚本触碰到系统资源，浏览器将每一个渲染进程装进了沙箱，并且为了防止 CPU 芯片一直存在的 "),e("code",[t._v("Spectre")]),t._v(" 和 "),e("code",[t._v("Meltdown")]),t._v(" 漏洞，采取了"),e("code",[t._v("站点隔离")]),t._v("的手段，给每一个不同的站点(一级域名不同)分配了沙箱，互不干扰。\n具体见"),e("a",{attrs:{href:"https://www.youtube.com/watch?v=dBuykrdhK-A&feature=emb_logo",target:"_blank",rel:"noopener noreferrer"}},[t._v("YouTube 上 Chromium 安全团队的演讲视频"),e("OutboundLink")],1),t._v("。")]),t._v(" "),e("p",[t._v("在沙箱当中的渲染进程是没有办法发送网络请求的，那怎么办？只能通过网络进程来发送。那这样就涉及到进程间通信("),e("code",[t._v("IPC，Inter Process Communication")]),t._v(")了。接下来我们看看 chromium 当中进程间通信是如何完成的，在 chromium 源码中调用顺序如下:")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/3/22/170ffd924eaecb41?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),t._v(" "),e("p",[t._v("可能看了你会比较懵，如果想深入了解可以去看看 chromium 最新的源代码, "),e("a",{attrs:{href:"https://chromium.googlesource.com/chromium/src/+/refs/heads/master/ipc/",target:"_blank",rel:"noopener noreferrer"}},[t._v("IPC 源码地址"),e("OutboundLink")],1),t._v("及"),e("a",{attrs:{href:"https://blog.csdn.net/Luoshengyang/article/details/47822689",target:"_blank",rel:"noopener noreferrer"}},[t._v("Chromium IPC 源码解析文章"),e("OutboundLink")],1),t._v("。")]),t._v(" "),e("p",[t._v("总的来说就是利用"),e("code",[t._v("Unix Domain Socket")]),t._v("套接字，配合事件驱动的高性能网络并发库"),e("code",[t._v("libevent")]),t._v("完成进程的 "),e("code",[t._v("IPC 过程")]),t._v("。")]),t._v(" "),e("p",[t._v("好，现在数据传递给了浏览器主进程，主进程接收到后，才真正地发出相应的网络请求。")]),t._v(" "),e("p",[t._v("在服务端处理完数据后，将响应返回，主进程检查到跨域，且没有"),e("code",[t._v("cors")]),t._v("(跨域资源共享)响应头，将响应体"),e("strong",[t._v("全部丢掉")]),t._v("，并不会发送给渲染进程。这就达到了"),e("strong",[t._v("拦截数据")]),t._v("的目的。")]),t._v(" "),e("p",[t._v("接下来我们来说一说解决跨域问题的几种方案。")]),t._v(" "),e("h3",{attrs:{id:"浏览器限制跨域请求一般有两种方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器限制跨域请求一般有两种方式"}},[t._v("#")]),t._v(" 浏览器限制跨域请求一般有两种方式")]),t._v(" "),e("ul",[e("li",[t._v("浏览器限制发起跨域请求")]),t._v(" "),e("li",[t._v("跨域请求可以正常发起，但是返回的结果被浏览器拦截了")])]),t._v(" "),e("h3",{attrs:{id:"cors"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cors"}},[t._v("#")]),t._v(" CORS")]),t._v(" "),e("p",[e("code",[t._v("CORS")]),t._v(" 其实是 "),e("code",[t._v("W3C")]),t._v(" 的一个标准，全称是"),e("strong",[t._v("跨域资源共享")]),t._v("。它需要浏览器和服务器的共同支持，具体来说，"),e("strong",[t._v("非 IE 和 IE10 以上")]),t._v("支持"),e("code",[t._v("CORS")]),t._v("，服务器需要附加特定的"),e("code",[t._v("响应头")]),t._v("，后面具体拆解。不过在弄清楚 "),e("code",[t._v("CORS")]),t._v(" 的原理之前，我们需要清楚两个概念: "),e("strong",[t._v("简单请求")]),t._v("和"),e("strong",[t._v("非简单请求")]),t._v("。")]),t._v(" "),e("p",[t._v("浏览器根据请求方法和请求头的特定字段，将请求做了一下分类，具体来说规则是这样，凡是满足下面条件的属于"),e("strong",[t._v("简单请求")]),t._v(":")]),t._v(" "),e("ul",[e("li",[t._v("请求方法为 "),e("code",[t._v("GET、POST")]),t._v(" 或者 "),e("code",[t._v("HEAD")])]),t._v(" "),e("li",[t._v("请求头的取值范围: "),e("code",[t._v("Accept、Accept-Language、Content-Language、Content-Type")]),t._v("(只限于三个值"),e("code",[t._v("application/x-www-form-urlencoded")]),t._v("、"),e("code",[t._v("multipart/form-data")]),t._v("、"),e("code",[t._v("text/plain")]),t._v(")")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 表单提交")]),t._v("\nContent"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Type"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" application"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("x"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("www"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("form"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("urlencoded\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 文件上传")]),t._v("\nContent"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Type"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" multipart"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("form"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("data\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 纯文本")]),t._v("\nContent"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Type"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" text"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("plain\n")])])]),e("p",[t._v("浏览器画了这样一个圈，在这个"),e("strong",[t._v("圈里面")]),t._v("的就是"),e("strong",[t._v("简单请求")]),t._v(", "),e("strong",[t._v("圈外面")]),t._v("的就是"),e("strong",[t._v("非简单请求")]),t._v("，然后针对这两种不同的请求进行不同的处理。")]),t._v(" "),e("h3",{attrs:{id:"简单请求"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#简单请求"}},[t._v("#")]),t._v(" 简单请求")]),t._v(" "),e("p",[t._v("请求发出去之前，浏览器做了什么？")]),t._v(" "),e("p",[t._v("它会自动在请求头当中，添加一个"),e("code",[t._v("Origin")]),t._v("字段，用来说明请求来自哪个源。服务器拿到请求之后，在回应时对应地添加"),e("code",[t._v("Access-Control-Allow-Origin")]),t._v("字段，如果"),e("code",[t._v("Origin")]),t._v("不在这个字段的范围中，那么浏览器就会将响应拦截。")]),t._v(" "),e("p",[t._v("因此，"),e("code",[t._v("Access-Control-Allow-Origin")]),t._v("字段是服务器用来决定浏览器是否拦截这个响应，这是必需的字段。与此同时，其它一些可选的功能性的字段，用来描述如果不会拦截，这些字段将会发挥各自的作用。")]),t._v(" "),e("p",[t._v("比方说访问掘金网站，我们打开控制台随便查看一条请求信息")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("access"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("control"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("allow"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("origin"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" https"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("juejin"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("im\n")])])]),e("p",[e("code",[t._v("Access-Control-Allow-Credentials")]),t._v("。这个字段是一个布尔值，表示是否允许发送 "),e("code",[t._v("Cookie")]),t._v("，对于跨域请求，浏览器对这个字段默认值设为 "),e("code",[t._v("false")]),t._v("，而如果需要拿到浏览器的 "),e("code",[t._v("Cookie")]),t._v("，需要添加这个响应头并设为"),e("code",[t._v("true")]),t._v(", 并且在前端也需要设置"),e("code",[t._v("withCredentials")]),t._v("属性:")]),t._v(" "),e("div",{staticClass:"language-http extra-class"},[e("pre",{pre:!0,attrs:{class:"language-http"}},[e("code",[e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("access-control-allow-credentials:")]),t._v(" true\n")])])]),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" xhr "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("XMLHttpRequest")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nxhr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("withCredentials "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[e("code",[t._v("Access-Control-Expose-Headers")]),t._v("。这个字段是给 "),e("code",[t._v("XMLHttpRequest")]),t._v(" 对象赋能，让它不仅可以拿到基本的 6 个响应头字段（包括"),e("code",[t._v("Cache-Control、Content-Language、Content-Type、Expires、Last-Modified和Pragma")]),t._v("）, 还能拿到这个字段声明的响应头字段。比如这样设置:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("Access"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Control"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Expose"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Headers"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" aaa\n")])])]),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("access"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("control"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("allow"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("headers"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" x"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("requested"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("content"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("type"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("Cache"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Control"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("Pragma"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("Date"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("x"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("timestamp\n")])])]),e("p",[t._v("那么在前端可以通过 "),e("code",[t._v("XMLHttpRequest.getResponseHeader('aaa')")]),t._v(" 拿到 "),e("code",[t._v("aaa")]),t._v(" 这个字段的值。")]),t._v(" "),e("h3",{attrs:{id:"非简单请求"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#非简单请求"}},[t._v("#")]),t._v(" 非简单请求")]),t._v(" "),e("p",[t._v("非简单请求相对而言会有些不同，体现在两个方面: "),e("strong",[t._v("预检请求")]),t._v("和"),e("strong",[t._v("响应字段")])]),t._v(" "),e("p",[t._v("我们以 "),e("code",[t._v("PUT")]),t._v(" 方法为例。")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" url "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://xxx.com'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" xhr "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("XMLHttpRequest")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nxhr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'PUT'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" url"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nxhr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setRequestHeader")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'X-Custom-Header'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'xxx'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nxhr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("当这段代码执行后，首先会发送"),e("strong",[t._v("预检请求")]),t._v("("),e("code",[t._v("preflight request")]),t._v(")。这个"),e("strong",[t._v("预检请求")]),t._v("的请求行和请求体是下面这个格式:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("OPTIONS")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTTP")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.1")]),t._v("\nOrigin"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" 当前地址\nHost"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" xxx"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com\nAccess"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Control"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Request"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Method"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PUT")]),t._v("\nAccess"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Control"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Request"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Headers"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("X")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Custom"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Header\n\n")])])]),e("p",[t._v("预检请求的方法是"),e("code",[t._v("OPTIONS")]),t._v("，同时会加上"),e("code",[t._v("Origin源地址")]),t._v("和"),e("code",[t._v("Host目标地址")]),t._v("，这很简单。同时也会加上两个关键的字段:")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("Access-Control-Request-Method")]),t._v(", 列出 "),e("code",[t._v("CORS")]),t._v(" 请求用到哪个"),e("strong",[t._v("HTTP 方法")])]),t._v(" "),e("li",[e("code",[t._v("Access-Control-Request-Headers")]),t._v("，指定 "),e("code",[t._v("CORS")]),t._v(" 请求将要加上什么"),e("strong",[t._v("请求头")])])]),t._v(" "),e("p",[t._v("预检请求的响应。如下面的格式:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTTP")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.1")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("OK")]),t._v("\nAccess"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Control"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Allow"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Origin"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("\nAccess"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Control"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Allow"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Methods"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("GET")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("POST")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PUT")]),t._v("\nAccess"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Control"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Allow"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Headers"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("X")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Custom"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Header\nAccess"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Control"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Allow"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Credentials"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\nAccess"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Control"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Max"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Age"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1728000")]),t._v("\nContent"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Type"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" text"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("html"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" charset"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("utf"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("\nContent"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Encoding"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" gzip\nContent"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Length"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n\n")])])]),e("p",[t._v("其中有这样几个关键的"),e("strong",[t._v("响应头字段")]),t._v(":")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("Access-Control-Allow-Origin")]),t._v(": 表示可以允许"),e("strong",[t._v("请求的源")]),t._v("，可以填具体的源名，也可以填"),e("code",[t._v("*")]),t._v("表示"),e("strong",[t._v("允许任意源请求")]),t._v("。")]),t._v(" "),e("li",[e("code",[t._v("Access-Control-Allow-Methods")]),t._v(": 表示允许的"),e("strong",[t._v("请求方法列表")]),t._v("。")]),t._v(" "),e("li",[e("code",[t._v("Access-Control-Allow-Credentials")]),t._v(": 是否允许携带"),e("code",[t._v("cookie")]),t._v("。")]),t._v(" "),e("li",[e("code",[t._v("Access-Control-Allow-Headers")]),t._v(": 表示允许发送的"),e("strong",[t._v("请求头字段")])]),t._v(" "),e("li",[e("code",[t._v("Access-Control-Max-Age")]),t._v(": 预检请求的"),e("strong",[t._v("有效期")]),t._v("，在此期间，不用发出另外一条预检请求。")])]),t._v(" "),e("p",[t._v("在预检请求的响应返回后，如果请求不满足响应头的条件，则触发"),e("code",[t._v("XMLHttpRequest")]),t._v("的"),e("code",[t._v("onerror")]),t._v("方法，当然后面真正的"),e("code",[t._v("CORS请求")]),t._v("也不会发出去了。")]),t._v(" "),e("p",[e("strong",[t._v("CORS 请求的响应")]),t._v("。绕了这么一大转，到了真正的 "),e("code",[t._v("CORS")]),t._v(" 请求就容易多了，现在它和简单请求的情况是一样的。浏览器自动加上"),e("code",[t._v("Origin")]),t._v("字段，服务端响应头返回"),e("code",[t._v("Access-Control-Allow-Origin")]),t._v("。可以参考以上简单请求部分的内容。")]),t._v(" "),e("h3",{attrs:{id:"jsonp"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jsonp"}},[t._v("#")]),t._v(" JSONP")]),t._v(" "),e("p",[t._v("虽然"),e("code",[t._v("XMLHttpRequest")]),t._v("对象遵循同源政策，但是"),e("code",[t._v("script")]),t._v("标签不一样，它可以通过 "),e("code",[t._v("src")]),t._v(" 填上"),e("strong",[t._v("目标地址")]),t._v("从而发出 "),e("code",[t._v("GET")]),t._v(" 请求，"),e("strong",[t._v("实现跨域请求并拿到响应")]),t._v("。这也就是 "),e("code",[t._v("JSONP")]),t._v(" 的原理，接下来我们就来封装一个 "),e("code",[t._v("JSONP")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("jsonp")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" url"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" params"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" callbackName "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("generateURL")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" dataStr "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" key "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" params"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      dataStr "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("key"),e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("params"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("&")]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    dataStr "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("callback=")]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("callbackName"),e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("url"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("endsWith")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("?")]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'?'")]),e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("dataStr"),e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Promise")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("resolve"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" reject")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 初始化回调函数名称")]),t._v("\n    callbackName "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" callbackName "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" Math"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("random")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("toString"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("','")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建 script 元素并加入到当前文档中")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" scriptEle "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("createElement")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'script'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    scriptEle"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("src "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("generateURL")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    document"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendChild")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("scriptEle"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 绑定到 window 上，为了后面调用")]),t._v("\n    window"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("callbackName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("data")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// script 执行完了，成为无用元素，需要清除")]),t._v("\n      document"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeChild")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("scriptEle"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),e("p",[t._v("当然在服务端也会有响应的操作, 以 "),e("code",[t._v("express")]),t._v(" 为例:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" express "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'express'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" app "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("express")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\napp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("req"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" res")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" callback "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" req"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("query"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 注意哦，返回给script标签，浏览器直接把这部分"字符串回调函数"执行')]),t._v("\n  res"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("callback"),e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("('数据包xxx')")]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\napp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("listen")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3000")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("然后前端这样简单地调用一下就好了:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("jsonp")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 请求地址")]),t._v("\n  url"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://localhost:3000'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  params"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    a"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    b"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("data")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 拿到数据进行处理")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 数据包")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("和"),e("code",[t._v("CORS")]),t._v("相比，"),e("code",[t._v("JSONP")]),t._v(" 最大的优势在于兼容性好，IE 低版本不能使用 "),e("code",[t._v("CORS")]),t._v(" 但可以使用 "),e("code",[t._v("JSONP")]),t._v("，缺点也很明显，请求方法单一，"),e("strong",[t._v("只支持 GET 请求")]),t._v("。")]),t._v(" "),e("h3",{attrs:{id:"nginx"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nginx"}},[t._v("#")]),t._v(" Nginx")]),t._v(" "),e("p",[e("code",[t._v("Nginx")]),t._v(" 是一种高性能的"),e("strong",[t._v("反向代理服务器")]),t._v("，可以用来轻松"),e("strong",[t._v("解决跨域问题")]),t._v("。")]),t._v(" "),e("p",[e("code",[t._v("what")]),t._v("？反向代理？我给你看一张图你就懂了。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/3/22/170ffd97d0b1cf15?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),t._v(" "),e("p",[e("strong",[t._v("正向代理")]),t._v("帮助客户端"),e("strong",[t._v("访问")]),t._v("客户端"),e("strong",[t._v("自己访问不到")]),t._v("的服务器，然后将结果返回给客户端。")]),t._v(" "),e("p",[t._v("反向代理拿到客户端的请求，将请求转发给其他的服务器，主要的场景是维持服务器集群的"),e("strong",[t._v("负载均衡")]),t._v("，换句话说，"),e("strong",[t._v("反向代理帮其它的服务器拿到请求")]),t._v("，然后"),e("strong",[t._v("选择一个合适的服务器")]),t._v("，将"),e("strong",[t._v("请求转交")]),t._v("给它。")]),t._v(" "),e("p",[t._v("比如我们去银行办理业务，首先我们会去找个取号机，然后取出我们的号码以及对应的办理柜台，这个取号机就相当于上面说的"),e("code",[t._v("nginx")]),t._v("，它可以帮我们将业务分配到"),e("strong",[t._v("合适的柜台")]),t._v("(当前最少人的，有空闲时间的)办理，这也就相当于"),e("strong",[t._v("负载均衡")]),t._v("的作用。")]),t._v(" "),e("p",[t._v("好了，那 Nginx 是如何来解决跨域的呢？")]),t._v(" "),e("p",[t._v("比如说现在客户端的域名为"),e("code",[t._v("client.com")]),t._v("，服务器的域名为"),e("code",[t._v("server.com")]),t._v("，客户端向服务器发送 "),e("code",[t._v("Ajax")]),t._v(" 请求，当然会跨域了，那这个时候让 Nginx 登场了，通过下面这个配置:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("server "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  listen  "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  server_name  client"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  location "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("api "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    proxy_pass server"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("Nginx 相当于起了一个"),e("strong",[t._v("跳板机")]),t._v("，这个"),e("strong",[t._v("跳板机")]),t._v("的域名也是"),e("code",[t._v("client.com")]),t._v("，让客户端首先访问 "),e("code",[t._v("client.com/api")]),t._v("，这当然没有跨域，然后 "),e("code",[t._v("Nginx")]),t._v(" 服务器作为反向代理，将"),e("strong",[t._v("请求转发")]),t._v("给"),e("code",[t._v("server.com")]),t._v("，当响应返回时又将响应给到客户端，这就完成整个跨域请求的过程。")]),t._v(" "),e("p",[t._v("其实还有一些不太常用的方式，大家了解即可，比如 postMessage，当然 WebSocket 也是一种方式，但是已经不属于 HTTP 的范畴，另外一些奇技淫巧就不建议大家去死记硬背了，一方面从来不用，名字都难得记住，另一方面临时背下来，面试官也不会对你印象加分，因为看得出来是背的。当然没有背并不代表减分，把跨域原理和"),e("strong",[t._v("前面三种主要的跨域方式")]),t._v("理解清楚，经得起更深一步的推敲，反而会让别人觉得你是一个靠谱的人。")]),t._v(" "),e("h2",{attrs:{id:"_015-tls1-2-握手的过程是怎样的？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_015-tls1-2-握手的过程是怎样的？"}},[t._v("#")]),t._v(" 015: TLS1.2 握手的过程是怎样的？")]),t._v(" "),e("p",[t._v("之前谈到了 HTTP 是明文传输的协议，传输保文对外完全透明，非常不安全，那如何进一步保证安全性呢？")]),t._v(" "),e("p",[t._v("由此产生了 "),e("code",[t._v("HTTPS")]),t._v("，其实它并不是一个新的协议，而是在 HTTP 下面增加了一层 "),e("code",[t._v("SSL/TLS")]),t._v(" 协议，简单的讲，"),e("code",[t._v("HTTPS = HTTP + SSL/TLS")]),t._v("。")]),t._v(" "),e("p",[t._v("那什么是 "),e("code",[t._v("SSL/TLS")]),t._v(" 呢？")]),t._v(" "),e("p",[t._v("实际上以前是称为 "),e("code",[t._v("SSL")]),t._v(", 现在是"),e("code",[t._v("TLS")])]),t._v(" "),e("p",[e("code",[t._v("SSL")]),t._v(" 即"),e("code",[t._v("安全套接层（Secure Sockets Layer）")]),t._v("，在 "),e("code",[t._v("OSI")]),t._v(" 七层模型中处于会话层(第 5 层)。之前 "),e("code",[t._v("SSL")]),t._v(" 出过三个大版本，当它发展到"),e("strong",[t._v("第三个大版本")]),t._v("的时候才被标准化，成为 "),e("code",[t._v("TLS")]),t._v("（传输层安全，"),e("code",[t._v("Transport Layer Security")]),t._v("），并被当做 "),e("code",[t._v("TLS1.0")]),t._v(" 的版本，准确地说，"),e("code",[t._v("TLS1.0 = SSL3.1")]),t._v("。")]),t._v(" "),e("p",[t._v("现在主流的版本是 "),e("code",[t._v("TLS/1.2")]),t._v(", 之前的 "),e("code",[t._v("TLS1.0、TLS1.1")]),t._v(" 都被认为是不安全的，在不久的将来会被完全淘汰。因此我们接下来主要讨论的是 "),e("code",[t._v("TLS1.2")]),t._v(", 当然在 "),e("code",[t._v("2018")]),t._v(" 年推出了更加优秀的 "),e("code",[t._v("TLS1.3")]),t._v("，大大优化了 "),e("code",[t._v("TLS")]),t._v(" 握手过程，这个我们放在下一节再去说。")]),t._v(" "),e("p",[t._v("TLS 握手的过程比较复杂，写文章之前我查阅了大量的资料，发现对 "),e("code",[t._v("TLS")]),t._v(" 初学者非常不友好，也有很多知识点说的含糊不清，可以说这个整理的过程是相当痛苦了。希望我下面的拆解能够帮你理解得更顺畅些吧!")]),t._v(" "),e("h3",{attrs:{id:"传统-rsa-握手"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#传统-rsa-握手"}},[t._v("#")]),t._v(" 传统 RSA 握手")]),t._v(" "),e("p",[t._v("先来说说传统的 "),e("code",[t._v("TLS")]),t._v(" 握手，也是大家在网上经常看到的。可以参考这篇文章，"),e("a",{attrs:{href:"http://47.98.159.95/my_blog/browser-security/003.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("(传统 RSA 版本)"),e("code",[t._v("HTTPS")]),t._v("为什么让数据传输更安全"),e("OutboundLink")],1),t._v("，其中也介绍到了对称加密和非对称加密的概念，建议大家去读一读，不再赘述。之所以称它为 "),e("code",[t._v("RSA")]),t._v(" 版本，是因为它在"),e("code",[t._v("加解密pre_random")]),t._v("的时候采用的是 "),e("code",[t._v("RSA")]),t._v(" 算法。")]),t._v(" "),e("h4",{attrs:{id:"tls-1-2-握手过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tls-1-2-握手过程"}},[t._v("#")]),t._v(" TLS 1.2 握手过程")]),t._v(" "),e("p",[t._v("现在我们来讲讲主流的 TLS 1.2 版本所采用的方式。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/3/22/170ffd9b35c7a81b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),t._v(" "),e("p",[t._v("刚开始你可能会比较懵，先别着急，过一遍下面的流程再来看会豁然开朗。")]),t._v(" "),e("h5",{attrs:{id:"step-1-client-hello"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#step-1-client-hello"}},[t._v("#")]),t._v(" step 1: Client Hello")]),t._v(" "),e("p",[t._v("首先，浏览器发送 "),e("code",[t._v("client_random、TLS版本、加密套件列表")]),t._v("。")]),t._v(" "),e("p",[e("code",[t._v("client_random")]),t._v(" 是什么？用来最终 "),e("code",[t._v("secret")]),t._v(" 的一个参数。")]),t._v(" "),e("p",[t._v("加密套件列表是什么？我举个例子，加密套件列表一般长这样子:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TLS_ECDHE_WITH_AES_128_GCM_SHA256")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("意思是"),e("code",[t._v("TLS")]),t._v("握手过程中，使用"),e("code",[t._v("ECDHE")]),t._v("算法生成"),e("code",[t._v("pre_random")]),t._v("("),e("strong",[t._v("预随机数")]),t._v("，这个数后面会介绍)，128 位的 AES 算法进行对称加密，在对称加密的过程中使用主流的 GCM 分组模式，因为对称加密中很重要的一个问题就是如何分组。最后一个是"),e("strong",[t._v("哈希摘要")]),t._v("算法，采用 SHA256 算法。")]),t._v(" "),e("p",[t._v("其中值得解释一下的是这个"),e("strong",[t._v("哈希摘要")]),t._v("算法，试想一个这样的场景，服务端现在给客户端发消息来了，客户端并不知道此时的消息到底是服务端发的，还是中间人伪造的消息呢？现在引入这个哈希摘要算法，将服务端的证书信息通过"),e("strong",[t._v("这个算法")]),t._v("生成一个摘要(可以理解为"),e("strong",[t._v("比较短的字符串")]),t._v(")，用来"),e("strong",[t._v("标识")]),t._v("这个服务端的"),e("strong",[t._v("身份")]),t._v("，用私钥加密后把"),e("strong",[t._v("加密后的标识")]),t._v("和"),e("strong",[t._v("自己的公钥")]),t._v("传给客户端。客户端拿到这个"),e("strong",[t._v("公钥来解密")]),t._v("，生成另外一份摘要。"),e("strong",[t._v("两个摘要进行对比")]),t._v("，如果相同则能确认服务端的身份。这也就是所谓"),e("strong",[t._v("数字签名")]),t._v("的原理。其中除了"),e("strong",[t._v("哈希算法")]),t._v("，最重要的过程是"),e("strong",[t._v("私钥加密，公钥解密")]),t._v("。")]),t._v(" "),e("h5",{attrs:{id:"step-2-server-hello"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#step-2-server-hello"}},[t._v("#")]),t._v(" step 2: Server Hello")]),t._v(" "),e("p",[t._v("可以看到服务器一口气给客户端回复了非常多的内容。")]),t._v(" "),e("p",[e("code",[t._v("server_random")]),t._v("也是最后生成"),e("code",[t._v("secret")]),t._v("的一个参数, 同时确认 "),e("code",[t._v("TLS")]),t._v(" 版本、需要使用的"),e("strong",[t._v("加密套件")]),t._v("和"),e("strong",[t._v("自己的证书")]),t._v("，这都不难理解。那剩下的"),e("code",[t._v("server_params")]),t._v("是干嘛的呢？")]),t._v(" "),e("p",[t._v("我们先埋个伏笔，现在你只需要知道，"),e("code",[t._v("server_random")]),t._v("到达了客户端。")]),t._v(" "),e("h5",{attrs:{id:"step-3-client-验证证书，生成-secret"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#step-3-client-验证证书，生成-secret"}},[t._v("#")]),t._v(" step 3: Client 验证证书，生成 secret")]),t._v(" "),e("p",[t._v("客户端验证服务端传来的"),e("code",[t._v("证书")]),t._v("和"),e("code",[t._v("签名")]),t._v("是否通过，如果验证通过，则传递"),e("code",[t._v("client_params")]),t._v("这个参数给服务器。")]),t._v(" "),e("p",[t._v("接着客户端通过"),e("code",[t._v("ECDHE")]),t._v("算法计算出"),e("code",[t._v("pre_random")]),t._v("，其中传入两个参数:"),e("code",[t._v("server_params")]),t._v("和"),e("code",[t._v("client_params")]),t._v("。现在你应该清楚这个两个参数的作用了吧，由于"),e("code",[t._v("ECDHE")]),t._v("基于"),e("code",[t._v("椭圆曲线离散对数")]),t._v("，这两个参数也称作"),e("code",[t._v("椭圆曲线的公钥")]),t._v("。")]),t._v(" "),e("p",[t._v("客户端现在拥有了"),e("code",[t._v("client_random、server_random")]),t._v("和"),e("code",[t._v("pre_random")]),t._v("，接下来将这三个数通过一个伪随机数函数来计算出最终的"),e("code",[t._v("secret")]),t._v("。")]),t._v(" "),e("h5",{attrs:{id:"step4-server-生成-secret"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#step4-server-生成-secret"}},[t._v("#")]),t._v(" step4: Server 生成 secret")]),t._v(" "),e("p",[t._v("刚刚客户端不是传了"),e("code",[t._v("client_params")]),t._v("过来了吗？")]),t._v(" "),e("p",[t._v("现在服务端开始用"),e("code",[t._v("ECDHE")]),t._v("算法生成"),e("code",[t._v("pre_random")]),t._v("，接着用和客户端同样的伪随机数函数生成最后的"),e("code",[t._v("secret")]),t._v("。")]),t._v(" "),e("h4",{attrs:{id:"注意事项"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#注意事项"}},[t._v("#")]),t._v(" 注意事项")]),t._v(" "),e("p",[t._v("TLS 的过程基本上讲完了，但还有两点需要注意。")]),t._v(" "),e("p",[e("strong",[t._v("第一")]),t._v("、实际上 "),e("code",[t._v("TLS")]),t._v(" 握手是一个"),e("strong",[t._v("双向认证")]),t._v("的过程，从 "),e("code",[t._v("step1")]),t._v(" 中可以看到，客户端有能力验证服务器的身份，那服务器能不能验证客户端的身份呢？")]),t._v(" "),e("p",[t._v("当然是可以的。具体来说，在 "),e("code",[t._v("step3")]),t._v(" 中，客户端传送 "),e("code",[t._v("client_params")]),t._v(" ，实际上给服务器传一个"),e("strong",[t._v("验证消息")]),t._v("，让服务器将相同的验证流程("),e("code",[t._v("哈希摘要 + 私钥加密 + 公钥解密")]),t._v(")走一遍，确认客户端的身份。")]),t._v(" "),e("p",[e("strong",[t._v("第二")]),t._v("、当客户端生成 "),e("code",[t._v("secret")]),t._v(" 后，会给服务端发送一个收尾的消息，告诉服务器之后的都用"),e("strong",[t._v("对称加密")]),t._v("，"),e("strong",[t._v("对称加密")]),t._v("的算法就用第一次约定的。服务器生成完"),e("code",[t._v("secret")]),t._v("也会向客户端发送一个收尾的消息，告诉客户端以后就直接用"),e("strong",[t._v("对称加密")]),t._v("来通信。")]),t._v(" "),e("p",[t._v("这个收尾的消息包括两部分，一部分是"),e("code",[t._v("Change Cipher Spec")]),t._v("，意味着后面加密传输了，另一个是"),e("code",[t._v("Finished")]),t._v("消息，这个消息是对之前所有发送的数据做的"),e("strong",[t._v("摘要")]),t._v("，对摘要进行加密，让对方验证一下。")]),t._v(" "),e("p",[t._v("当双方都验证通过之后，握手才正式结束。后面的 HTTP 正式开始传输加密报文。")]),t._v(" "),e("h4",{attrs:{id:"rsa-和-ecdhe-握手过程的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rsa-和-ecdhe-握手过程的区别"}},[t._v("#")]),t._v(" RSA 和 ECDHE 握手过程的区别")]),t._v(" "),e("ol",[e("li",[e("p",[e("code",[t._v("ECDHE")]),t._v(" 握手，也就是主流的 "),e("code",[t._v("TLS1.2")]),t._v(" 握手中，使用"),e("code",[t._v("ECDHE")]),t._v("实现"),e("code",[t._v("pre_random")]),t._v("的加密解密，没有用到 "),e("code",[t._v("RSA")]),t._v("。")])]),t._v(" "),e("li",[e("p",[t._v("使用 "),e("code",[t._v("ECDHE")]),t._v(" 还有一个特点，就是客户端发送完收尾消息后可以提前"),e("code",[t._v("抢跑")]),t._v("，"),e("strong",[t._v("直接发送")]),t._v(" "),e("code",[t._v("HTTP 报文")]),t._v("，节省了一个 "),e("code",[t._v("RTT")]),t._v(" ，不必等到收尾消息到达服务器，然后等服务器返回收尾消息给自己，"),e("strong",[t._v("直接开始发请求")]),t._v("。这也叫"),e("code",[t._v("TLS False Start")]),t._v("。")])])]),t._v(" "),e("h3",{attrs:{id:"_016-tls-1-3-做了哪些改进"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_016-tls-1-3-做了哪些改进"}},[t._v("#")]),t._v(" 016: TLS 1.3 做了哪些改进")]),t._v(" "),e("p",[t._v("TLS 1.2 虽然存在了 10 多年，经历了无数的考验，但历史的车轮总是不断向前的，为了获得"),e("strong",[t._v("更强的安全、更优秀的性能")]),t._v("，在 2018 年就推出了 "),e("code",[t._v("TLS1.3")]),t._v("，对于 "),e("code",[t._v("TLS1.2")]),t._v(" 做了一系列的改进，主要分为这几个部分:"),e("strong",[t._v("强化安全、提高性能")]),t._v("。")]),t._v(" "),e("h4",{attrs:{id:"强化安全"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#强化安全"}},[t._v("#")]),t._v(" 强化安全")]),t._v(" "),e("p",[t._v("在 TLS1.3 中废除了非常多的加密算法，最后只保留五个加密套件:")]),t._v(" "),e("ul",[e("li",[t._v("TLS_AES_128_GCM_SHA256")]),t._v(" "),e("li",[t._v("TLS_AES_256_GCM_SHA384")]),t._v(" "),e("li",[t._v("TLS_CHACHA20_POLY1305_SHA256")]),t._v(" "),e("li",[t._v("TLS_AES_128_GCM_SHA256")]),t._v(" "),e("li",[t._v("TLS_AES_128_GCM_8_SHA256")])]),t._v(" "),e("p",[t._v("可以看到，最后剩下的对称加密算法只有 "),e("code",[t._v("AES")]),t._v(" 和 "),e("code",[t._v("CHACHA20")]),t._v("，之前主流的也用这两种。"),e("strong",[t._v("分组模式")]),t._v("也只剩下 "),e("code",[t._v("GCM")]),t._v(" 和 "),e("code",[t._v("POLY1305")]),t._v(", "),e("strong",[t._v("哈希摘要算法")]),t._v("只剩下了 "),e("code",[t._v("SHA256")]),t._v(" 和 "),e("code",[t._v("SHA384")]),t._v(" 了。")]),t._v(" "),e("p",[t._v("那你可能会问了, 之前"),e("code",[t._v("RSA")]),t._v("这么重要的"),e("strong",[t._v("非对称加密算法")]),t._v("怎么不在了？")]),t._v(" "),e("p",[t._v("我觉得有两方面的原因:")]),t._v(" "),e("p",[e("strong",[t._v("第一")]),t._v("、2015 年发现了"),e("code",[t._v("FREAK")]),t._v("攻击，即已经有人发现了 RSA 的漏洞，能够进行破解了。")]),t._v(" "),e("p",[e("strong",[t._v("第二")]),t._v("、一旦私钥泄露，那么中间人可以通过私钥计算出之前所有报文的"),e("code",[t._v("secret")]),t._v("，破解之前所有的密文。")]),t._v(" "),e("p",[t._v("为什么？\n回到 "),e("code",[t._v("RSA")]),t._v(" 握手的过程中，客户端拿到服务器的证书后，提取出服务器的公钥，然后生成"),e("code",[t._v("pre_random")]),t._v("并用"),e("strong",[t._v("公钥加密")]),t._v("传给服务器，服务器通过"),e("strong",[t._v("私钥解密")]),t._v("，从而拿到真实的"),e("code",[t._v("pre_random")]),t._v("。当中间人拿到了"),e("strong",[t._v("服务器私钥")]),t._v("，并且截获之前所有报文的时候，那么就能拿到"),e("code",[t._v("pre_random、server_random")]),t._v("和"),e("code",[t._v("client_random")]),t._v("并根据对应的"),e("strong",[t._v("随机数函数")]),t._v("生成"),e("code",[t._v("secret")]),t._v("，也就是拿到了 "),e("code",[t._v("TLS")]),t._v(" 最终的"),e("strong",[t._v("会话密钥")]),t._v("，每一个历史报文都能通过这样的方式进行破解。")]),t._v(" "),e("p",[t._v("但"),e("code",[t._v("ECDHE")]),t._v("在每次握手时都会生成临时的密钥对，即使私钥被破解，之前的历史消息并不会收到影响。这种一次破解并不影响历史信息的性质也叫前向安全性。")]),t._v(" "),e("p",[e("code",[t._v("RSA")]),t._v(" 算法不具备"),e("strong",[t._v("前向安全性")]),t._v("，而 "),e("code",[t._v("ECDHE")]),t._v(" 具备，因此在 "),e("code",[t._v("TLS1.3")]),t._v(" 中彻底取代了"),e("code",[t._v("RSA")]),t._v("。")]),t._v(" "),e("h4",{attrs:{id:"提升性能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#提升性能"}},[t._v("#")]),t._v(" 提升性能")]),t._v(" "),e("h5",{attrs:{id:"握手改进"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#握手改进"}},[t._v("#")]),t._v(" 握手改进")]),t._v(" "),e("p",[t._v("流程如下:")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/3/22/170ffda75857d404?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),t._v(" "),e("p",[t._v("大体的方式和 "),e("code",[t._v("TLS1.2")]),t._v(" 差不多，不过和 "),e("code",[t._v("TLS1.2")]),t._v(" 相比少了一个 "),e("code",[t._v("RTT")]),t._v("("),e("code",[t._v("Round-Trip Time")]),t._v("往返时间)， 服务端不必等待对方验证证书之后才拿到"),e("code",[t._v("client_params")]),t._v("，而是直接在第一次握手的时候就能够拿到, 拿到之后立即计算"),e("code",[t._v("secret")]),t._v("，节省了之前不必要的等待时间。同时，这也意味着在第一次握手的时候客户端需要传送更多的信息，一口气给传完。")]),t._v(" "),e("p",[t._v("这种 "),e("code",[t._v("TLS 1.3")]),t._v(" 握手方式也被叫做"),e("code",[t._v("1-RTT")]),t._v("握手。但其实这种"),e("code",[t._v("1-RTT")]),t._v("的握手方式还是有一些优化的空间的，接下来我们来一一介绍这些优化方式。")]),t._v(" "),e("h5",{attrs:{id:"会话复用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#会话复用"}},[t._v("#")]),t._v(" 会话复用")]),t._v(" "),e("p",[t._v("会话复用有两种方式: "),e("code",[t._v("Session ID")]),t._v("和"),e("code",[t._v("Session Ticket")]),t._v("。")]),t._v(" "),e("p",[t._v("先说说最早出现的"),e("code",[t._v("Seesion ID")]),t._v("，具体做法是客户端和服务器首次连接后"),e("strong",[t._v("各自保存会话的 ID")]),t._v("，并"),e("strong",[t._v("存储")]),t._v("会话密钥，当再次连接时，客户端发送"),e("code",[t._v("ID")]),t._v("过来，服务器查找这个 "),e("code",[t._v("ID")]),t._v(" 是否存在，如果找到了就直接复用之前的会话状态，会话密钥不用重新生成，直接用原来的那份。")]),t._v(" "),e("p",[t._v("但这种方式也存在一个弊端，就是当客户端数量庞大的时候，对服务端的"),e("strong",[t._v("存储压力")]),t._v("非常大。")]),t._v(" "),e("p",[t._v("因而出现了第二种方式——"),e("code",[t._v("Session Ticket")]),t._v("。它的思路就是: 服务端的压力大，那就把压力"),e("strong",[t._v("分摊")]),t._v("给客户端呗。具体来说，双方连接成功后，服务器"),e("strong",[t._v("加密会话信息")]),t._v("，用"),e("code",[t._v("Session Ticket")]),t._v("消息发给客户端，让客户端"),e("strong",[t._v("保存")]),t._v("下来。下次"),e("strong",[t._v("重连")]),t._v("的时候，就把这个 "),e("code",[t._v("Ticket")]),t._v(" 进行解密，验证它过没过期，如果没过期那就直接恢复之前的会话状态。")]),t._v(" "),e("p",[t._v("这种方式虽然减小了服务端的存储压力，但与带来了安全问题，即每次用一个"),e("strong",[t._v("固定的密钥")]),t._v("来解密 "),e("code",[t._v("Ticket")]),t._v(" 数据，一旦黑客拿到这个密钥，之前所有的历史记录也被破解了。因此为了尽量避免这样的问题，密钥需要"),e("strong",[t._v("定期进行更换")]),t._v("。")]),t._v(" "),e("p",[t._v("总的来说，这些会话复用的技术在保证"),e("code",[t._v("1-RTT")]),t._v("的同时，也"),e("strong",[t._v("节省")]),t._v("了生成会话密钥这些算法所消耗的"),e("strong",[t._v("时间")]),t._v("，是一笔可观的性能提升。")]),t._v(" "),e("h5",{attrs:{id:"psk"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#psk"}},[t._v("#")]),t._v(" PSK")]),t._v(" "),e("p",[t._v("刚刚说的都是"),e("code",[t._v("1-RTT")]),t._v("情况下的优化，那能不能优化到"),e("code",[t._v("0-RTT")]),t._v("呢？")]),t._v(" "),e("p",[t._v("答案是可以的。做法其实也很简单，在发送"),e("code",[t._v("Session Ticket")]),t._v("的同时"),e("strong",[t._v("带上应用数据")]),t._v("，不用等到服务端确认，这种方式被称为"),e("code",[t._v("Pre-Shared Key")]),t._v("，即 "),e("code",[t._v("PSK")]),t._v("。")]),t._v(" "),e("p",[t._v("这种方式虽然方便，但也带来了安全问题。中间人截获"),e("code",[t._v("PSK")]),t._v("的数据，不断向服务器重复发，类似于 TCP 第一次握手携带数据，增加了服务器被攻击的风险。")]),t._v(" "),e("h4",{attrs:{id:"总结下"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结下"}},[t._v("#")]),t._v(" 总结下")]),t._v(" "),e("p",[e("code",[t._v("TLS1.3")]),t._v(" 在 "),e("code",[t._v("TLS1.2")]),t._v(" 的基础上废除了大量的算法，提升了安全性。同时利用"),e("strong",[t._v("会话复用")]),t._v("节省了重新生成密钥的时间，利用 "),e("code",[t._v("PSK")]),t._v(" 做到了 "),e("code",[t._v("0-RTT")]),t._v(" 连接。")]),t._v(" "),e("h2",{attrs:{id:"_017-http-2-有哪些改进？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_017-http-2-有哪些改进？"}},[t._v("#")]),t._v(" 017: HTTP/2 有哪些改进？")]),t._v(" "),e("p",[t._v("由于 HTTPS 在"),e("strong",[t._v("安全")]),t._v("方面已经做的非常好了，HTTP 改进的关注点放在了"),e("strong",[t._v("性能")]),t._v("方面。对于 HTTP/2 而言，它对于性能的提升主要在于两点:")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("头部压缩")])]),t._v(" "),e("li",[e("strong",[t._v("多路复用")])])]),t._v(" "),e("p",[t._v("当然还有一些颠覆性的功能实现:")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("设置请求优先级")])]),t._v(" "),e("li",[e("strong",[t._v("服务器推送")])])]),t._v(" "),e("p",[t._v("这些重大的提升本质上也是为了解决 "),e("code",[t._v("HTTP")]),t._v(" 本身的问题而产生的。接下来我们来看看 "),e("code",[t._v("HTTP/2")]),t._v(" 解决了哪些问题，以及解决方式具体是如何的。")]),t._v(" "),e("h3",{attrs:{id:"头部压缩"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#头部压缩"}},[t._v("#")]),t._v(" 头部压缩")]),t._v(" "),e("p",[t._v("在 "),e("code",[t._v("HTTP/1.1")]),t._v(" 及之前的时代，请求体一般会有相应的压缩编码过程，通过"),e("code",[t._v("Content-Encoding")]),t._v("头部字段来指定，但你有没有想过头部字段本身的压缩呢？当请求字段非常复杂的时候，尤其对于 GET 请求，请求报文几乎全是请求头，这个时候还是存在非常大的优化空间的。HTTP/2 针对头部字段，也采用了对应的压缩算法——"),e("code",[t._v("HPACK")]),t._v("，"),e("strong",[t._v("对请求头进行压缩")]),t._v("。")]),t._v(" "),e("p",[e("code",[t._v("HPACK")]),t._v(" 算法是专门为 "),e("code",[t._v("HTTP/2")]),t._v(" 服务的，它主要的亮点有两个：")]),t._v(" "),e("ul",[e("li",[t._v("首先是在服务器和客户端之间建立哈希表，将用到的字段存放在这张表中，那么在传输的时候对于之前出现过的值，只需要把索引(比如 0，1，2，...)传给对方即可，对方拿到索引查表就行了。这种传索引的方式，可以说让请求头字段得到极大程度的精简和复用。")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/3/22/170ffdaa6f41c004?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),t._v(" "),e("blockquote",[e("p",[t._v('HTTP/2 当中废除了起始行的概念，将起始行中的请求方法、URI、状态码转换成了头字段，不过这些字段都有一个":"前缀，用来和其它请求头区分开。')])]),t._v(" "),e("ul",[e("li",[t._v("其次是对于整数和字符串进行"),e("strong",[t._v("哈夫曼编码")]),t._v("，"),e("strong",[t._v("哈夫曼编码")]),t._v("的原理就是先将所有出现的字符建立一张"),e("strong",[t._v("索引表")]),t._v("，然后让出现次数多的字符对应的索引尽可能短，传输的时候也是传输这样的"),e("strong",[t._v("索引序列")]),t._v("，可以达到非常高的压缩率。")])]),t._v(" "),e("h3",{attrs:{id:"多路复用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多路复用"}},[t._v("#")]),t._v(" 多路复用")]),t._v(" "),e("h4",{attrs:{id:"http-队头阻塞"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-队头阻塞"}},[t._v("#")]),t._v(" HTTP 队头阻塞")]),t._v(" "),e("p",[t._v("我们之前讨论了 "),e("code",[t._v("HTTP")]),t._v(" 队头阻塞的问题，其根本原因在于 "),e("code",[t._v("HTTP")]),t._v(" 基于"),e("strong",[t._v("请求-响应")]),t._v("的模型，在同一个 "),e("code",[t._v("TCP 长连接")]),t._v("中，前面的请求没有得到响应，后面的请求就会被阻塞。")]),t._v(" "),e("p",[t._v("后面我们又讨论到用"),e("strong",[t._v("并发连接")]),t._v("和"),e("strong",[t._v("域名分片")]),t._v("的方式来解决这个问题，但这并没有真正从 "),e("code",[t._v("HTTP")]),t._v(" 本身的层面解决问题，只是增加了 "),e("code",[t._v("TCP")]),t._v(" 连接，"),e("strong",[t._v("分摊风险")]),t._v("而已。而且这么做也有弊端，多条 "),e("code",[t._v("TCP")]),t._v(" 连接会竞争有限的带宽，让真正优先级高的请求不能优先处理。")]),t._v(" "),e("p",[t._v("而 "),e("code",[t._v("HTTP/2")]),t._v(" 便从 "),e("code",[t._v("HTTP")]),t._v(" 协议本身解决了队头阻塞问题。注意，这里并不是指的"),e("code",[t._v("TCP队头阻塞")]),t._v("，而是"),e("code",[t._v("HTTP队头阻塞")]),t._v("，两者并不是一回事。TCP 的队头阻塞是在数据包层面，单位是"),e("strong",[t._v("数据包")]),t._v("，前一个报文没有收到便不会将后面收到的报文上传给 "),e("code",[t._v("HTTP")]),t._v("，而"),e("code",[t._v("HTTP")]),t._v(" 的队头阻塞是在 "),e("code",[t._v("HTTP")]),t._v(" "),e("strong",[t._v("请求-响应")]),t._v("层面，前一个请求没处理完，后面的请求就要阻塞住。两者所在的层次不一样。")]),t._v(" "),e("p",[t._v("那么 HTTP/2 如何来解决所谓的队头阻塞呢？")]),t._v(" "),e("h4",{attrs:{id:"二进制分帧"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二进制分帧"}},[t._v("#")]),t._v(" 二进制分帧")]),t._v(" "),e("p",[t._v("首先，"),e("code",[t._v("HTTP/2")]),t._v(" 认为明文传输对机器而言太麻烦了，不方便计算机的解析，因为对于文本而言会有多义性的字符，比如回车换行到底是内容还是分隔符，在内部需要用到状态机去识别，效率比较低。于是 "),e("code",[t._v("HTTP/2")]),t._v(" 干脆把报文全部换成二进制格式，全部传输 01 串，方便了机器的解析。")]),t._v(" "),e("p",[t._v("原来"),e("code",[t._v("Headers + Body")]),t._v("的报文格式如今被拆分成了一个个二进制的帧，用 Headers 帧存放头部字段，Data 帧存放请求体数据。分帧之后，服务器看到的不再是一个个完整的 HTTP 请求报文，而是一堆乱序的二进制帧。这些二进制帧不存在先后关系，因此也就不会排队等待，也就没有了 HTTP 的队头阻塞问题。")]),t._v(" "),e("p",[t._v("通信双方都可以给对方发送二进制帧，这种二进制帧的双向传输的序列，也叫做流("),e("code",[t._v("Stream")]),t._v(")。HTTP/2 用流来在一个 TCP 连接上来进行多个数据帧的通信，这就是多路复用的概念。")]),t._v(" "),e("p",[t._v("可能你会有一个疑问，既然是乱序首发，那最后如何来处理这些乱序的数据帧呢？")]),t._v(" "),e("p",[t._v("首先要声明的是，所谓的乱序，指的是不同 "),e("code",[t._v("ID")]),t._v(" 的 "),e("code",[t._v("Stream")]),t._v(" 是乱序的，但同一个 "),e("code",[t._v("Stream ID")]),t._v(" 的帧一定是按顺序传输的。二进制帧到达后对方会将 "),e("code",[t._v("Stream ID")]),t._v(" 相同的二进制帧组装成完整的请求报文和响应报文。当然，在二进制帧当中还有其他的一些字段，实现了优先级和流量控制等功能，我们放到下一节再来介绍。")]),t._v(" "),e("h4",{attrs:{id:"服务器推送"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#服务器推送"}},[t._v("#")]),t._v(" 服务器推送")]),t._v(" "),e("p",[t._v("另外值得一说的是 "),e("code",[t._v("HTTP/2")]),t._v(" 的服务器推送(Server Push)。在 "),e("code",[t._v("HTTP/2")]),t._v(" 当中，服务器已经不再是完全被动地接收请求，响应请求，它也能新建 "),e("code",[t._v("stream")]),t._v(" 来给客户端发送消息，当 "),e("code",[t._v("TCP")]),t._v(" 连接建立之后，比如浏览器请求一个 "),e("code",[t._v("HTML")]),t._v(" 文件，服务器就可以在返回 "),e("code",[t._v("HTML")]),t._v(" 的基础上，将 "),e("code",[t._v("HTML")]),t._v(" 中引用到的其他资源文件一起返回给客户端，减少客户端的等待。")]),t._v(" "),e("p",[e("strong",[t._v("总结")]),t._v(":")]),t._v(" "),e("p",[t._v("当然，"),e("code",[t._v("HTTP/2")]),t._v(" 新增那么多的特性，是不是 "),e("code",[t._v("HTTP")]),t._v(" 的语法要重新学呢？不需要，"),e("code",[t._v("HTTP/2")]),t._v(" 完全兼容之前 "),e("code",[t._v("HTTP")]),t._v(" 的语法和语义，如请求头、"),e("code",[t._v("URI")]),t._v("、状态码、头部字段都没有改变，完全不用担心。同时，在安全方面，"),e("code",[t._v("HTTP/2")]),t._v(" 也支持 "),e("code",[t._v("TLS")]),t._v("，并且现在主流的浏览器都公开只支持加密的 "),e("code",[t._v("HTTP/2")]),t._v(", 因此你现在能看到的 "),e("code",[t._v("HTTP/2")]),t._v(" 也基本上都是跑在 "),e("code",[t._v("TLS")]),t._v(" 上面的了。最后放一张分层图给大家参考:")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/3/22/170ffdc6783132a5?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),t._v(" "),e("h2",{attrs:{id:"_018-http-2-中的二进制帧是如何设计的？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_018-http-2-中的二进制帧是如何设计的？"}},[t._v("#")]),t._v(" 018: HTTP/2 中的二进制帧是如何设计的？")]),t._v(" "),e("h3",{attrs:{id:"帧结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#帧结构"}},[t._v("#")]),t._v(" 帧结构")]),t._v(" "),e("p",[t._v("HTTP/2 中传输的帧结构如下图所示:")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/3/22/170ffdc9e9c25e93?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),t._v(" "),e("p",[t._v("接下来的一个字节是帧标志，里面一共有 "),e("code",[t._v("8")]),t._v(" 个标志位，常用的有 "),e("code",[t._v("END_HEADERS")]),t._v(" 表示头数据结束，"),e("code",[t._v("END_STREAM")]),t._v(" 表示单方向数据发送结束。")]),t._v(" "),e("p",[t._v("后 4 个字节是"),e("code",[t._v("Stream ID")]),t._v(", 也就是流标识符，有了它，接收方就能从乱序的"),e("strong",[t._v("二进制帧")]),t._v("中选择出 "),e("code",[t._v("ID")]),t._v(" 相同的帧，按顺序组装成"),e("strong",[t._v("请求/响应报文")]),t._v("。")]),t._v(" "),e("h3",{attrs:{id:"流的状态变化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#流的状态变化"}},[t._v("#")]),t._v(" 流的状态变化")]),t._v(" "),e("p",[t._v("从前面可以知道，在 "),e("code",[t._v("HTTP/2")]),t._v(" 中，所谓的流，其实就是"),e("strong",[t._v("二进制帧")]),t._v("的"),e("strong",[t._v("双向传输的序列")]),t._v("。那么在 "),e("code",[t._v("HTTP/2")]),t._v(" 请求和响应的过程中，流的状态是如何变化的呢？")]),t._v(" "),e("p",[e("code",[t._v("HTTP/2")]),t._v(" 其实也是借鉴了 "),e("code",[t._v("TCP")]),t._v(" 状态变化的思想，根据帧的标志位来实现具体的状态改变。这里我们以一个普通的"),e("strong",[t._v("请求-响应")]),t._v("过程为例来说明：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/3/22/170ffdcd0abdd1ba?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),t._v(" "),e("p",[t._v("最开始两者都是空闲状态，当客户端发送"),e("code",[t._v("Headers")]),t._v("帧后，开始分配"),e("code",[t._v("Stream ID")]),t._v(", 此时客户端的"),e("strong",[t._v("流")]),t._v("打开, 服务端接收之后服务端的"),e("strong",[t._v("流")]),t._v("也打开，两端的"),e("strong",[t._v("流")]),t._v("都打开之后，就可以互相传递"),e("strong",[t._v("数据帧")]),t._v("和"),e("strong",[t._v("控制帧")]),t._v("了。")]),t._v(" "),e("p",[t._v("当客户端要关闭时，向服务端发送"),e("code",[t._v("END_STREAM")]),t._v("帧，进入"),e("strong",[t._v("半关闭状态")]),t._v(", 这个时候客户端只能接收数据，而不能发送数据。")]),t._v(" "),e("p",[t._v("服务端收到这个"),e("code",[t._v("END_STREAM")]),t._v("帧后也进入"),e("strong",[t._v("半关闭状态")]),t._v("，不过此时服务端的情况是只能发送数据，而不能接收数据。随后服务端也向客户端发送"),e("code",[t._v("END_STREAM")]),t._v("帧，表示数据发送完毕，双方进入关闭状态。")]),t._v(" "),e("p",[t._v("如果下次要开启新的"),e("code",[t._v("流")]),t._v("，"),e("code",[t._v("流")]),t._v(" ID 需要自增，直到上限为止，到达上限后开一个新的 TCP 连接"),e("strong",[t._v("重头开始计数")]),t._v("。由于流 ID 字段长度为 4 个字节，最高位又被保留，因此范围是 "),e("code",[t._v("0 ~ 2的 31 次方")]),t._v("，大约 "),e("code",[t._v("21 亿个")]),t._v("。")]),t._v(" "),e("h3",{attrs:{id:"流的特性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#流的特性"}},[t._v("#")]),t._v(" 流的特性")]),t._v(" "),e("p",[t._v("刚刚谈到了流的状态变化过程，这里顺便就来总结一下"),e("code",[t._v("流")]),t._v("传输的特性:")]),t._v(" "),e("ul",[e("li",[t._v("并发性。一个 "),e("code",[t._v("HTTP/2")]),t._v(" 连接上可以"),e("strong",[t._v("同时发多个帧")]),t._v("，这一点和 "),e("code",[t._v("HTTP/1")]),t._v(" 不同。这也是实现多路复用的基础。")]),t._v(" "),e("li",[t._v("自增性。流 "),e("code",[t._v("ID")]),t._v(" 是不可重用的，而是会按顺序递增，达到上限之后又新开 "),e("code",[t._v("TCP")]),t._v(" 连接从头开始。")]),t._v(" "),e("li",[t._v("双向性。客户端和服务端都可以创建流，互不干扰，双方都可以作为"),e("code",[t._v("发送方")]),t._v("或者"),e("code",[t._v("接收方")]),t._v("。")]),t._v(" "),e("li",[t._v("可设置优先级。可以设置数据帧的优先级，让服务端先处理重要资源，优化用户体验。")])]),t._v(" "),e("h2",{attrs:{id:"http-3-新特性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-3-新特性"}},[t._v("#")]),t._v(" HTTP/3 新特性")]),t._v(" "),e("h3",{attrs:{id:"_1-http-2-的缺点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-http-2-的缺点"}},[t._v("#")]),t._v(" 1.HTTP/2 的缺点")]),t._v(" "),e("p",[t._v("虽然 HTTP/2 解决了很多之前旧版本的问题，但是它还是存在一个巨大的问题，"),e("strong",[t._v("主要是底层支撑的 TCP 协议造成的")]),t._v("。HTTP/2 的缺点主要有以下几点：")]),t._v(" "),e("ul",[e("li",[t._v("TCP 以及 TCP+TLS 建立连接的延时")])]),t._v(" "),e("p",[t._v("HTTP/2 使用 TCP 协议来传输的，而如果使用 HTTPS 的话，还需要使用 TLS 协议进行安全传输，而使用 TLS 也需要一个握手过程，"),e("strong",[t._v("这样就需要有两个握手延迟过程")]),t._v("：")]),t._v(" "),e("p",[t._v("① 在建立 TCP 连接的时候，需要和服务器进行三次握手来确认连接成功，也就是说需要在消耗完 1.5 个 RTT 之后才能进行数据传输。")]),t._v(" "),e("p",[t._v("② 进行 TLS 连接，TLS 有两个版本——TLS1.2 和 TLS1.3，每个版本建立连接所花的时间不同，大致是需要 1~2 个 RTT。")]),t._v(" "),e("p",[t._v("总之，在传输数据之前，我们需要花掉 3 ～ 4 个 RTT。")]),t._v(" "),e("ul",[e("li",[t._v("TCP 的队头阻塞并没有彻底解决")])]),t._v(" "),e("p",[t._v("上文我们提到在 HTTP/2 中，多个请求是跑在一个 TCP 管道中的。但当出现了丢包时，HTTP/2 的表现反倒不如 HTTP/1 了。因为 TCP 为了保证可靠传输，有个特别的“丢包重传”机制，丢失的包必须要等待重新传输确认，HTTP/2 出现丢包时，整个 TCP 都要开始等待重传，那么就会阻塞该 TCP 连接中的所有请求（如下图）。而对于 HTTP/1.1 来说，可以开启多个 TCP 连接，出现这种情况反到只会影响其中一个连接，剩余的 TCP 连接还可以正常传输数据。")]),t._v(" "),e("p",[e("img",{attrs:{src:a(381),alt:"http3-1.png"}})]),t._v(" "),e("p",[t._v("读到这里，可能就会有人考虑为什么不直接去修改 TCP 协议？其实这已经是一件不可能完成的任务了。因为 TCP 存在的时间实在太长，已经充斥在各种设备中，并且这个协议是由操作系统实现的，更新起来不大现实。")]),t._v(" "),e("h3",{attrs:{id:"_2-http-3-简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-http-3-简介"}},[t._v("#")]),t._v(" 2.HTTP/3 简介")]),t._v(" "),e("p",[t._v("Google 在推 "),e("code",[t._v("SPDY")]),t._v(" 的时候就已经意识到了这些问题，于是就另起炉灶搞了一个基于 "),e("code",[t._v("UDP")]),t._v(" 协议的 "),e("code",[t._v("QUIC")]),t._v(" 协议，让 "),e("code",[t._v("HTTP")]),t._v(" 跑在 "),e("code",[t._v("QUIC")]),t._v(" 上而不是 "),e("code",[t._v("TCP")]),t._v(" 上。\n而这个"),e("code",[t._v("HTTP over QUIC")]),t._v("就是 "),e("code",[t._v("HTTP")]),t._v(" 协议的下一个大版本，"),e("code",[t._v("HTTP/3")]),t._v("。它在 "),e("code",[t._v("HTTP/2")]),t._v(" 的基础上又实现了质的飞跃，真正"),e("code",[t._v("完美")]),t._v("地解决了"),e("code",[t._v("队头阻塞")]),t._v("问题。")]),t._v(" "),e("p",[e("img",{attrs:{src:a(382),alt:"http3-2.png"}})]),t._v(" "),e("p",[e("code",[t._v("QUIC")]),t._v(" 虽然基于 "),e("code",[t._v("UDP")]),t._v("，但是在原本的基础上新增了很多功能，接下来我们重点介绍几个 "),e("code",[t._v("QUIC")]),t._v(" 新功能。不过 "),e("code",[t._v("HTTP/3")]),t._v(" 目前还处于草案阶段，正式发布前可能会有变动，所以本文尽量不涉及那些不稳定的细节")]),t._v(" "),e("h3",{attrs:{id:"_3-quic-新功能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-quic-新功能"}},[t._v("#")]),t._v(" 3.QUIC 新功能")]),t._v(" "),e("p",[t._v('上面我们提到 QUIC 基于 UDP，而 UDP 是“无连接”的，根本就不需要“握手”和“挥手”，所以就比 TCP 来得快。此外 QUIC 也实现了可靠传输，保证数据一定能够抵达目的地。它还引入了类似 HTTP/2 的“流”和“多路复用”，单个“流"是有序的，可能会因为丢包而阻塞，但其他“流”不会受到影响。具体来说 QUIC 协议有以下特点：')]),t._v(" "),e("ul",[e("li",[t._v("实现了类似 TCP 的流量控制、传输可靠性的功能。")])]),t._v(" "),e("p",[t._v("虽然 UDP 不提供可靠性的传输，但 QUIC 在 UDP 的基础之上增加了一层来保证数据可靠性传输。它提供了数据包重传、拥塞控制以及其他一些 TCP 中存在的特性。")]),t._v(" "),e("ul",[e("li",[t._v("实现了快速握手功能。")])]),t._v(" "),e("p",[t._v("由于 QUIC 是基于 UDP 的，所以 QUIC 可以实现使用 0-RTT 或者 1-RTT 来建立连接，这意味着 QUIC 可以用最快的速度来发送和接收数据，这样可以大大提升首次打开页面的速度。"),e("strong",[t._v("0RTT 建连可以说是 QUIC 相比 HTTP2 最大的性能优势")]),t._v("。")]),t._v(" "),e("ul",[e("li",[t._v("集成了 TLS 加密功能。")])]),t._v(" "),e("p",[t._v("目前 QUIC 使用的是 TLS1.3，相较于早期版本 TLS1.3 有更多的优点，其中最重要的一点是减少了握手所花费的 RTT 个数。")]),t._v(" "),e("ul",[e("li",[t._v("多路复用，彻底解决 TCP 中队头阻塞的问题")])]),t._v(" "),e("p",[t._v("和 TCP 不同，QUIC 实现了在同一物理连接上可以有多个独立的逻辑数据流（如下图）。实现了数据流的单独传输，就解决了 TCP 中队头阻塞的问题。")]),t._v(" "),e("p",[e("img",{attrs:{src:a(383),alt:"http3-3.png"}})]),t._v(" "),e("h2",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("HTTP/1.1")]),t._v(" 有两个主要的缺点：安全不足和性能不高。")]),t._v(" "),e("li",[e("code",[t._v("HTTP/2")]),t._v(" 完全兼容 "),e("code",[t._v("HTTP/1")]),t._v("，是"),e("strong",[t._v("更安全的 HTTP、更快的 HTTPS")]),t._v("，"),e("strong",[t._v("头部压缩、多路复用")]),t._v("等技术可以充分利用带宽，降低延迟，从而大幅度提高上网体验；")]),t._v(" "),e("li",[e("code",[t._v("QUIC")]),t._v(" 基于 "),e("code",[t._v("UDP")]),t._v(" 实现，是 "),e("code",[t._v("HTTP/3")]),t._v(" 中的底层支撑协议，该协议基于 "),e("code",[t._v("UDP")]),t._v("，又取了 "),e("code",[t._v("TCP")]),t._v(" 中的精华，实现了即快又可靠的协议")])]),t._v(" "),e("h2",{attrs:{id:"参考资料"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://blog.csdn.net/qq_34629352/article/details/78959707",target:"_blank",rel:"noopener noreferrer"}},[t._v("encodeURI()和 encodeURIComponent() 区别"),e("OutboundLink")],1)])]),t._v(" "),e("h2",{attrs:{id:"最后"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#最后"}},[t._v("#")]),t._v(" 最后")]),t._v(" "),e("p",[t._v("文中若有不准确或错误的地方，欢迎指出，有兴趣可以的关注下"),e("a",{attrs:{href:"https://github.com/GolderBrother",target:"_blank",rel:"noopener noreferrer"}},[t._v("Github"),e("OutboundLink")],1),t._v("~")])])}),[],!1,null,null,null);s.default=_.exports}}]);